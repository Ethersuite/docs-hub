openapi: 3.0.0
paths:
  /v1/analytics/stats:
    get:
      operationId: AnalyticsController_getStats
      parameters: []
      responses:
        '200':
          description: Returns system-wide kpis for admin Dashboard.
      tags:
        - analytics
      security:
        - bearer: []
  /v1/tenants:
    post:
      operationId: TenantsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTenantRequestDto'
      responses:
        '201':
          description: Returns the newly created Tenant.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTenantResponseDto'
        '403':
          description: This action is not permitted.
      tags:
        - tenants
      security:
        - bearer: []
    get:
      operationId: TenantsController_findAll
      parameters:
        - name: page
          required: false
          in: query
          description: Page number
          schema:
            type: number
        - name: perPage
          required: false
          in: query
          description: Number of items per page
          schema:
            type: number
        - name: sortField
          required: false
          in: query
          description: Field to sort by
          schema:
            type: string
        - name: filterField
          required: false
          in: query
          description: Field to filter by
          schema:
            type: string
        - name: filterValue
          required: false
          in: query
          description: Value to filter by
          schema:
            type: string
        - name: dateRange
          required: false
          in: query
          description: Date range to search for
          schema:
            enum:
              - all_time
              - this_week
              - last_week
              - this_month
              - last_month
              - this_quarter
              - last_quarter
              - this_year
              - last_year
            type: string
        - name: searchString
          required: false
          in: query
          description: Value to search for
          schema:
            type: string
      responses:
        '200':
          description: Returns a list (page) of Tenants.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pageableResponse'
      tags:
        - tenants
      security:
        - bearer: []
  /v1/tenants/access-keys:
    get:
      operationId: TenantsController_getAccessKeys
      parameters: []
      responses:
        '200':
          description: Returns the tenants access keys.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessKeysResponseDto'
      tags:
        - tenants
      security:
        - bearer: []
    post:
      operationId: TenantsController_generateAccessKeys
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManageAccessKeysRequestDto'
      responses:
        '200':
          description: Returns the newly generated access keys.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessKeysResponseDto'
        '201':
          description: ''
        '403':
          description: This action is not permitted.
      tags:
        - tenants
      security:
        - bearer: []
  /v1/tenants/options:
    get:
      operationId: TenantsController_getFormOptions
      parameters: []
      responses:
        '200':
          description: Returns options used in the tenant form.
      tags:
        - tenants
      security:
        - bearer: []
  /v1/tenants/stats:
    get:
      operationId: TenantsController_getStats
      parameters: []
      responses:
        '200':
          description: Returns Tenant stats (kpis).
      tags:
        - tenants
      security:
        - bearer: []
  /v1/tenants/{id}/resend-welcome-email:
    get:
      operationId: TenantsController_sendWelcomeEmail
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Resent the welcome email to the tenant.
      tags:
        - tenants
      security:
        - bearer: []
  /v1/tenants/{id}:
    get:
      operationId: TenantsController_findById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Returns the requested Tenant.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantDto'
        '404':
          description: The tenant was not found.
      tags:
        - tenants
      security:
        - bearer: []
    patch:
      operationId: TenantsController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTenantRequestDto'
      responses:
        '204':
          description: Saved changes to the tenant.
      tags:
        - tenants
      security:
        - bearer: []
    delete:
      operationId: TenantsController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Deleted the tenant.
      tags:
        - tenants
      security:
        - bearer: []
  /v1/tenants/{id}/settings:
    patch:
      operationId: TenantsController_updateSettings
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTenantSettingsDto'
      responses:
        '204':
          description: Update tenant settings.
      tags:
        - tenants
      security:
        - bearer: []
  /v1/users:
    post:
      operationId: UsersController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequestDto'
      responses:
        '201':
          description: Returns the newly created User.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponseDto'
        '403':
          description: This action is not permitted.
      tags:
        - users
      security:
        - bearer: []
    get:
      operationId: UsersController_findAll
      parameters:
        - name: page
          required: false
          in: query
          description: Page number
          schema:
            type: number
        - name: perPage
          required: false
          in: query
          description: Number of items per page
          schema:
            type: number
        - name: sortField
          required: false
          in: query
          description: Field to sort by
          schema:
            type: string
        - name: filterField
          required: false
          in: query
          description: Field to filter by
          schema:
            type: string
        - name: filterValue
          required: false
          in: query
          description: Value to filter by
          schema:
            type: string
        - name: dateRange
          required: false
          in: query
          description: Date range to search for
          schema:
            enum:
              - all_time
              - this_week
              - last_week
              - this_month
              - last_month
              - this_quarter
              - last_quarter
              - this_year
              - last_year
            type: string
        - name: searchString
          required: false
          in: query
          description: Value to search for
          schema:
            type: string
      responses:
        '200':
          description: Returns a list (page) of Users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pageableResponse'
      tags:
        - users
      security:
        - bearer: []
  /v1/users/{id}:
    get:
      operationId: UsersController_findById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Returns the requested User.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '404':
          description: The User was not found.
      tags:
        - users
      security:
        - bearer: []
    patch:
      operationId: UsersController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequestDto'
      responses:
        '204':
          description: Saved changes to the user profile.
      tags:
        - users
      security:
        - bearer: []
    delete:
      operationId: UsersController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Deleted the user.
      tags:
        - users
      security:
        - bearer: []
  /v1/users/change-password:
    patch:
      operationId: UsersController_changePassword
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordDto'
      responses:
        '200':
          description: Returns a success message if the password is successfully changed.
      tags:
        - users
      security:
        - bearer: []
  /v1/users/change-email:
    post:
      operationId: UsersController_changeEmail
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeEmailDto'
      responses:
        '200':
          description: >-
            Returns a success message if the email address is successfully
            changed.
        '201':
          description: ''
      tags:
        - users
      security:
        - bearer: []
  /v1/users/{id}/send-confirmation-email:
    patch:
      operationId: UsersController_sendConfirmEmail
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendConfirmEmailRequestDto'
      responses:
        '200':
          description: ''
        '201':
          description: Resent the confirmation email to the user.
      tags:
        - users
      security:
        - bearer: []
  /v1/contacts:
    post:
      operationId: ContactsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateContactRequestDto'
      responses:
        '201':
          description: Returns the newly created Contact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateContactResponseDto'
        '403':
          description: This action is not permitted.
      tags:
        - contacts
      security:
        - bearer: []
    get:
      operationId: ContactsController_findAll
      parameters:
        - name: page
          required: false
          in: query
          description: Page number
          schema:
            type: number
        - name: perPage
          required: false
          in: query
          description: Number of items per page
          schema:
            type: number
        - name: sortField
          required: false
          in: query
          description: Field to sort by
          schema:
            type: string
        - name: filterField
          required: false
          in: query
          description: Field to filter by
          schema:
            type: string
        - name: filterValue
          required: false
          in: query
          description: Value to filter by
          schema:
            type: string
        - name: dateRange
          required: false
          in: query
          description: Date range to search for
          schema:
            enum:
              - all_time
              - this_week
              - last_week
              - this_month
              - last_month
              - this_quarter
              - last_quarter
              - this_year
              - last_year
            type: string
        - name: searchString
          required: false
          in: query
          description: Value to search for
          schema:
            type: string
        - name: listId
          required: false
          in: query
          schema:
            type: string
        - name: exportCsv
          required: false
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Returns a list (page) of Contacts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pageableResponse'
      tags:
        - contacts
      security:
        - bearer: []
    delete:
      operationId: ContactsController_bulkRemove
      parameters: []
      responses:
        '204':
          description: Deleted the Contacts.
      tags:
        - contacts
      security:
        - bearer: []
  /v1/contacts/import:
    post:
      operationId: ContactsController_import
      parameters: []
      responses:
        '201':
          description: ''
      tags:
        - contacts
      security:
        - bearer: []
  /v1/contacts/sync:
    post:
      operationId: ContactsController_addToSyncBuffer
      parameters: []
      responses:
        '201':
          description: ''
      tags:
        - contacts
      security:
        - bearer: []
  /v1/contacts/subscriptions/{walletAddress}:
    get:
      operationId: ContactsController_findAllUserSubscriptions
      parameters:
        - name: walletAddress
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Returns a list of subscriptions for the user
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
      tags:
        - contacts
      security:
        - bearer: []
  /v1/contacts/{id}:
    get:
      operationId: ContactsController_findById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Returns the requested Contact.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactDto'
        '404':
          description: The contact was not found.
      tags:
        - contacts
      security:
        - bearer: []
    patch:
      operationId: ContactsController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateContactRequestDto'
      responses:
        '204':
          description: Saved changes to the Contact.
      tags:
        - contacts
      security:
        - bearer: []
    delete:
      operationId: ContactsController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Deleted the Contact.
      tags:
        - contacts
      security:
        - bearer: []
  /v1/subscription:
    post:
      operationId: SubscriptionController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionRequestDto'
      responses:
        '204':
          description: ''
        '403':
          description: This action is not permitted.
      tags:
        - subscription
  /v1/templates:
    post:
      operationId: TemplatesController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTemplateRequestDto'
      responses:
        '201':
          description: Returns the newly created Template.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTemplateResponseDto'
        '403':
          description: This action is not permitted.
      tags:
        - templates
      security:
        - bearer: []
    get:
      operationId: TemplatesController_findAll
      parameters:
        - name: page
          required: false
          in: query
          description: Page number
          schema:
            type: number
        - name: perPage
          required: false
          in: query
          description: Number of items per page
          schema:
            type: number
        - name: sortField
          required: false
          in: query
          description: Field to sort by
          schema:
            type: string
        - name: filterField
          required: false
          in: query
          description: Field to filter by
          schema:
            type: string
        - name: filterValue
          required: false
          in: query
          description: Value to filter by
          schema:
            type: string
        - name: dateRange
          required: false
          in: query
          description: Date range to search for
          schema:
            enum:
              - all_time
              - this_week
              - last_week
              - this_month
              - last_month
              - this_quarter
              - last_quarter
              - this_year
              - last_year
            type: string
        - name: searchString
          required: false
          in: query
          description: Value to search for
          schema:
            type: string
      responses:
        '200':
          description: Returns a list (page) of Templates.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pageableResponse'
      tags:
        - templates
      security:
        - bearer: []
  /v1/templates/{id}/duplicate:
    get:
      operationId: TemplatesController_clone
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
        '201':
          description: Duplicates a Template.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTemplateResponseDto'
        '403':
          description: This action is not permitted.
      tags:
        - templates
      security:
        - bearer: []
  /v1/templates/{id}:
    get:
      operationId: TemplatesController_findById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Returns the requested Template.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateDto'
        '404':
          description: The Template was not found.
      tags:
        - templates
      security:
        - bearer: []
    patch:
      operationId: TemplatesController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTemplateRequestDto'
      responses:
        '204':
          description: Saved changes to the Template.
      tags:
        - templates
      security:
        - bearer: []
    delete:
      operationId: TemplatesController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Deleted the Template.
      tags:
        - templates
      security:
        - bearer: []
  /v1/templates/{id}/shared:
    patch:
      operationId: TemplatesController_shared
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Share/Unshare the template.
      tags:
        - templates
      security:
        - bearer: []
  /v1/emails:
    post:
      operationId: EmailsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEmailRequestDto'
      responses:
        '201':
          description: Returns the newly created Email.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateEmailResponseDto'
      tags:
        - emails
      security:
        - bearer: []
    get:
      operationId: EmailsController_findAll
      parameters:
        - name: page
          required: false
          in: query
          description: Page number
          schema:
            type: number
        - name: perPage
          required: false
          in: query
          description: Number of items per page
          schema:
            type: number
        - name: sortField
          required: false
          in: query
          description: Field to sort by
          schema:
            type: string
        - name: filterField
          required: false
          in: query
          description: Field to filter by
          schema:
            type: string
        - name: filterValue
          required: false
          in: query
          description: Value to filter by
          schema:
            type: string
        - name: dateRange
          required: false
          in: query
          description: Date range to search for
          schema:
            enum:
              - all_time
              - this_week
              - last_week
              - this_month
              - last_month
              - this_quarter
              - last_quarter
              - this_year
              - last_year
            type: string
        - name: searchString
          required: false
          in: query
          description: Value to search for
          schema:
            type: string
      responses:
        '200':
          description: Returns a list (page) of Emails.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pageableResponse'
      tags:
        - emails
      security:
        - bearer: []
  /v1/emails/send-dynamic-ad:
    post:
      operationId: EmailsController_sendDynamicAd
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendDynamicAdDto'
      responses:
        '201':
          description: Sends the current active ad to an ethermail user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendDynamicAdDto'
      tags:
        - emails
      security:
        - bearer: []
  /v1/emails/{tenantId}/exclusive-emails:
    get:
      operationId: EmailsController_findExclusiveEmails
      parameters:
        - name: tenantId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Returns first 3 emails for the tenant
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pageableResponse'
      tags:
        - emails
      security:
        - bearer: []
  /v1/emails/stats:
    get:
      operationId: EmailsController_getStats
      parameters: []
      responses:
        '200':
          description: Returns stats (kpis) for a group of Emails.
      tags:
        - emails
      security:
        - bearer: []
  /v1/emails/queued:
    get:
      operationId: EmailsController_findAdvertisingEmailsQueued
      parameters:
        - name: page
          required: false
          in: query
          description: Page number
          schema:
            type: number
        - name: perPage
          required: false
          in: query
          description: Number of items per page
          schema:
            type: number
        - name: sortField
          required: false
          in: query
          description: Field to sort by
          schema:
            type: string
        - name: filterField
          required: false
          in: query
          description: Field to filter by
          schema:
            type: string
        - name: filterValue
          required: false
          in: query
          description: Value to filter by
          schema:
            type: string
        - name: dateRange
          required: false
          in: query
          description: Date range to search for
          schema:
            enum:
              - all_time
              - this_week
              - last_week
              - this_month
              - last_month
              - this_quarter
              - last_quarter
              - this_year
              - last_year
            type: string
        - name: searchString
          required: false
          in: query
          description: Value to search for
          schema:
            type: string
      responses:
        '200':
          description: Returns a list of email users.
      tags:
        - emails
      security:
        - bearer: []
  /v1/emails/logs:
    get:
      operationId: EmailsController_findLogs
      parameters:
        - name: page
          required: false
          in: query
          description: Page number
          schema:
            type: number
        - name: perPage
          required: false
          in: query
          description: Number of items per page
          schema:
            type: number
        - name: sortField
          required: false
          in: query
          description: Field to sort by
          schema:
            type: string
        - name: filterField
          required: false
          in: query
          description: Field to filter by
          schema:
            type: string
        - name: filterValue
          required: false
          in: query
          description: Value to filter by
          schema:
            type: string
        - name: dateRange
          required: false
          in: query
          description: Date range to search for
          schema:
            enum:
              - all_time
              - this_week
              - last_week
              - this_month
              - last_month
              - this_quarter
              - last_quarter
              - this_year
              - last_year
            type: string
        - name: searchString
          required: false
          in: query
          description: Value to search for
          schema:
            type: string
      responses:
        '200':
          description: Returns a list (page) of Email logs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pageableResponse'
      tags:
        - emails
      security:
        - bearer: []
  /v1/emails/calculate-recipients:
    get:
      operationId: EmailsController_calculateRecipients
      parameters:
        - name: segmentIds
          required: true
          in: query
          description: Segment IDs
          schema:
            default: []
            type: array
            items:
              type: string
        - name: listIds
          required: true
          in: query
          description: List IDs
          schema:
            default: []
            type: array
            items:
              type: string
      responses:
        '200':
          description: Returns the number of recipients for the email.
      tags:
        - emails
      security:
        - bearer: []
  /v1/emails/{id}:
    get:
      operationId: EmailsController_findById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Returns the requested Email.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailDto'
        '404':
          description: The email was not found.
      tags:
        - emails
      security:
        - bearer: []
    patch:
      operationId: EmailsController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEmailRequestDto'
      responses:
        '204':
          description: Saved changes to the Email.
      tags:
        - emails
      security:
        - bearer: []
    delete:
      operationId: EmailsController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Deleted the Email.
      tags:
        - emails
      security:
        - bearer: []
  /v1/emails/generate:
    post:
      operationId: EmailsController_generateEmailContent
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateEmailDto'
      responses:
        '200':
          description: Generate email content from a url using AI
        '201':
          description: ''
          content:
            application/json:
              schema:
                type: object
      tags:
        - emails
      security:
        - bearer: []
  /v1/emails/send-test:
    post:
      operationId: EmailsController_sendEmail
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendTestEmailDto'
      responses:
        '200':
          description: Send a test email.
        '201':
          description: ''
      tags:
        - emails
      security:
        - bearer: []
  /v1/emails/{email_log_id}/track-open:
    get:
      operationId: EmailsController_trackOpen
      parameters:
        - name: email_log_id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - emails
      security:
        - bearer: []
  /v1/emails/{email_log_id}/track-click/{index}:
    get:
      operationId: EmailsController_trackClick
      parameters:
        - name: email_log_id
          required: true
          in: path
          schema:
            type: string
        - name: index
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
      tags:
        - emails
      security:
        - bearer: []
  /v1/emails/{email_log_id}/unsubscribe:
    get:
      operationId: EmailsController_unsubscribe
      parameters:
        - name: email_log_id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - emails
      security:
        - bearer: []
  /v1/emails/unsubscribe-user:
    post:
      operationId: EmailsController_unsubscribeUserFromEmail
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdjustEmailsQueueRequestDto'
      responses:
        '201':
          description: >-
            Unsubscribes user from all emails that are not being sent yet -
            delete user from advertising emails queue
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdjustEmailsQueueRequestDto'
      tags:
        - emails
      security:
        - bearer: []
  /v1/emails/bounce:
    post:
      operationId: EmailsController_trackBounce
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BounceRequestDto'
      responses:
        '201':
          description: Tracks the bounce of an email and updates the email log accordingly.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BounceRequestDto'
        '204':
          description: ''
      tags:
        - emails
      security:
        - bearer: []
  /v1/emails/add-user-to-queue:
    post:
      operationId: EmailsController_addNewUserToEmailsQueue
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdjustEmailsQueueRequestDto'
      responses:
        '201':
          description: >-
            When a new user is created, he will be added to the advertising
            email queue
      tags:
        - emails
      security:
        - bearer: []
  /v1/emails/{email_id}/pause:
    post:
      operationId: EmailsController_pauseEmailSending
      parameters:
        - name: email_id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: ''
      tags:
        - emails
      security:
        - bearer: []
  /v1/emails/{email_id}/restart-sending:
    post:
      operationId: EmailsController_restartEmailSending
      parameters:
        - name: email_id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: ''
      tags:
        - emails
      security:
        - bearer: []
  /v1/emails/{email_id}/submit-new-inventory:
    post:
      operationId: EmailsController_updateInventory
      parameters:
        - name: email_id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEmailRequestDto'
      responses:
        '201':
          description: ''
      tags:
        - emails
      security:
        - bearer: []
  /v1/emails/{email_id}/dynamicAd:
    get:
      operationId: EmailsController_getDynamicAd
      parameters:
        - name: email_id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
      tags:
        - emails
      security:
        - bearer: []
  /v1/emails/{email_id}/create-dynamic-ad:
    post:
      operationId: EmailsController_createDynamicAd
      parameters:
        - name: email_id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                type: object
      tags:
        - emails
      security:
        - bearer: []
  /v1/emails/{email_id}/update-dynamic-ad:
    post:
      operationId: EmailsController_updateDynamicAd
      parameters:
        - name: email_id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                type: object
      tags:
        - emails
      security:
        - bearer: []
  /v1/emails/{email_id}/viral-snippets/{status}:
    put:
      operationId: EmailsController_updateViralSnippets
      parameters:
        - name: email_id
          required: true
          in: path
          schema:
            type: string
        - name: status
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
      tags:
        - emails
      security:
        - bearer: []
  /v1/exports/{id}:
    get:
      operationId: ExportsController_findById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Returns the export job status.
        '404':
          description: The export job was not found.
      tags:
        - exports
      security:
        - bearer: []
  /v1/transactional-emails:
    post:
      operationId: TransactionalEmailsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransactionalEmailLogRequestDto'
      responses:
        '201':
          description: Send a transactional Email.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTransactionalEmailLogResponseDto'
        '403':
          description: This action is not permitted.
      tags:
        - transactional-emails
      security:
        - bearer: []
    get:
      operationId: TransactionalEmailsController_findAll
      parameters:
        - name: page
          required: false
          in: query
          description: Page number
          schema:
            type: number
        - name: perPage
          required: false
          in: query
          description: Number of items per page
          schema:
            type: number
        - name: sortField
          required: false
          in: query
          description: Field to sort by
          schema:
            type: string
        - name: filterField
          required: false
          in: query
          description: Field to filter by
          schema:
            type: string
        - name: filterValue
          required: false
          in: query
          description: Value to filter by
          schema:
            type: string
        - name: dateRange
          required: false
          in: query
          description: Date range to search for
          schema:
            enum:
              - all_time
              - this_week
              - last_week
              - this_month
              - last_month
              - this_quarter
              - last_quarter
              - this_year
              - last_year
            type: string
        - name: searchString
          required: false
          in: query
          description: Value to search for
          schema:
            type: string
      responses:
        '200':
          description: Returns a list (page) of Transactional Email logs.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pageableResponse'
      tags:
        - transactional-emails
      security:
        - bearer: []
  /v1/transactional-emails/stats:
    get:
      operationId: TransactionalEmailsController_getStats
      parameters: []
      responses:
        '200':
          description: Returns stats (kpis) for a group of Transactional Emails.
      tags:
        - transactional-emails
      security:
        - bearer: []
  /v1/transactional-emails/{id}:
    get:
      operationId: TransactionalEmailsController_findById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Returns the requested Transactional Email.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionalEmailLogDto'
        '404':
          description: The transactional email was not found.
      tags:
        - transactional-emails
      security:
        - bearer: []
  /v1/transactional-emails/{transactional_email_log_id}/track-open:
    get:
      operationId: TransactionalEmailsController_trackOpen
      parameters:
        - name: transactional_email_log_id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - transactional-emails
      security:
        - bearer: []
  /v1/transactional-emails/{transactional_email_log_id}/track-click/{index}:
    get:
      operationId: TransactionalEmailsController_trackClick
      parameters:
        - name: transactional_email_log_id
          required: true
          in: path
          schema:
            type: string
        - name: index
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
      tags:
        - transactional-emails
      security:
        - bearer: []
  /v1/advertising/targeting-options:
    get:
      operationId: AdvertisingController_getTargetingFilterOptions
      parameters: []
      responses:
        '200':
          description: Returns options used in the advertising email targeting rules.
      tags:
        - advertising
      security:
        - bearer: []
  /v1/advertising/calculate-reach:
    post:
      operationId: AdvertisingController_calculateReach
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalculateReachRequestDto'
      responses:
        '201':
          description: Returns estimated reach for a target audience.
        '403':
          description: This action is not permitted.
      tags:
        - advertising
      security:
        - bearer: []
  /v1/advertising/kpis:
    get:
      operationId: AdvertisingController_getKpis
      parameters: []
      responses:
        '200':
          description: Returns the kpis from mongo for a specific campaign, by subject.
      tags:
        - advertising
      security:
        - bearer: []
  /v1/advertising/update-kpis:
    post:
      operationId: AdvertisingController_updateKpis
      parameters: []
      responses:
        '201':
          description: ''
      tags:
        - advertising
      security:
        - bearer: []
  /v1/advertising/{id}/force-resend:
    post:
      operationId: AdvertisingController_forceResend
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: ''
      tags:
        - advertising
      security:
        - bearer: []
  /v1/advertising/active-dynamic-ads:
    get:
      operationId: AdvertisingController_getActiveDynamicAds
      parameters: []
      responses:
        '200':
          description: ''
      tags:
        - advertising
      security:
        - bearer: []
  /v1/segments:
    post:
      operationId: SegmentsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSegmentRequestDto'
      responses:
        '201':
          description: Returns the newly created Segment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSegmentResponseDto'
        '403':
          description: This action is not permitted.
      tags:
        - segments
      security:
        - bearer: []
    get:
      operationId: SegmentsController_findAll
      parameters:
        - name: page
          required: false
          in: query
          description: Page number
          schema:
            type: number
        - name: perPage
          required: false
          in: query
          description: Number of items per page
          schema:
            type: number
        - name: sortField
          required: false
          in: query
          description: Field to sort by
          schema:
            type: string
        - name: filterField
          required: false
          in: query
          description: Field to filter by
          schema:
            type: string
        - name: filterValue
          required: false
          in: query
          description: Value to filter by
          schema:
            type: string
        - name: dateRange
          required: false
          in: query
          description: Date range to search for
          schema:
            enum:
              - all_time
              - this_week
              - last_week
              - this_month
              - last_month
              - this_quarter
              - last_quarter
              - this_year
              - last_year
            type: string
        - name: searchString
          required: false
          in: query
          description: Value to search for
          schema:
            type: string
      responses:
        '200':
          description: Returns a list (page) of Segments.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pageableResponse'
      tags:
        - segments
      security:
        - bearer: []
  /v1/segments/{id}:
    get:
      operationId: SegmentsController_findById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Returns the requested Segment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SegmentDto'
        '404':
          description: The Segment was not found.
      tags:
        - segments
      security:
        - bearer: []
    patch:
      operationId: SegmentsController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSegmentRequestDto'
      responses:
        '204':
          description: Saved changes to the segment.
      tags:
        - segments
      security:
        - bearer: []
    delete:
      operationId: SegmentsController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Deleted the segment.
      tags:
        - segments
      security:
        - bearer: []
  /v1/lists:
    post:
      operationId: ListsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateListRequestDto'
      responses:
        '201':
          description: Returns the newly created List.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateListResponseDto'
        '403':
          description: This action is not permitted.
      tags:
        - lists
      security:
        - bearer: []
    get:
      operationId: ListsController_findAll
      parameters:
        - name: page
          required: false
          in: query
          description: Page number
          schema:
            type: number
        - name: perPage
          required: false
          in: query
          description: Number of items per page
          schema:
            type: number
        - name: sortField
          required: false
          in: query
          description: Field to sort by
          schema:
            type: string
        - name: filterField
          required: false
          in: query
          description: Field to filter by
          schema:
            type: string
        - name: filterValue
          required: false
          in: query
          description: Value to filter by
          schema:
            type: string
        - name: dateRange
          required: false
          in: query
          description: Date range to search for
          schema:
            enum:
              - all_time
              - this_week
              - last_week
              - this_month
              - last_month
              - this_quarter
              - last_quarter
              - this_year
              - last_year
            type: string
        - name: searchString
          required: false
          in: query
          description: Value to search for
          schema:
            type: string
      responses:
        '200':
          description: Returns a list (page) of Lists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pageableResponse'
      tags:
        - lists
      security:
        - bearer: []
  /v1/lists/{id}:
    get:
      operationId: ListsController_findById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Returns the requested List.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDto'
        '404':
          description: The List was not found.
      tags:
        - lists
      security:
        - bearer: []
    patch:
      operationId: ListsController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateListRequestDto'
      responses:
        '204':
          description: Saved changes to the List.
      tags:
        - lists
      security:
        - bearer: []
    delete:
      operationId: ListsController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Deleted the list.
      tags:
        - lists
      security:
        - bearer: []
  /v1/lists/{id}/contacts:
    patch:
      operationId: ListsController_addContactsToList
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddToListRequestDto'
      responses:
        '204':
          description: Successfully added contacts to List.
      tags:
        - lists
      security:
        - bearer: []
    delete:
      operationId: ListsController_removeContactsFromList
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
        '204':
          description: Successfully removed contacts from List.
      tags:
        - lists
      security:
        - bearer: []
  /v1/automations:
    post:
      operationId: AutomationsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAutomationRequestDto'
      responses:
        '201':
          description: Returns the newly created Automation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAutomationResponseDto'
        '403':
          description: This action is not permitted.
      tags:
        - automations
      security:
        - bearer: []
    get:
      operationId: AutomationsController_findAll
      parameters:
        - name: page
          required: false
          in: query
          description: Page number
          schema:
            type: number
        - name: perPage
          required: false
          in: query
          description: Number of items per page
          schema:
            type: number
        - name: sortField
          required: false
          in: query
          description: Field to sort by
          schema:
            type: string
        - name: filterField
          required: false
          in: query
          description: Field to filter by
          schema:
            type: string
        - name: filterValue
          required: false
          in: query
          description: Value to filter by
          schema:
            type: string
        - name: dateRange
          required: false
          in: query
          description: Date range to search for
          schema:
            enum:
              - all_time
              - this_week
              - last_week
              - this_month
              - last_month
              - this_quarter
              - last_quarter
              - this_year
              - last_year
            type: string
        - name: searchString
          required: false
          in: query
          description: Value to search for
          schema:
            type: string
      responses:
        '200':
          description: Returns a list (page) of Automations.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pageableResponse'
      tags:
        - automations
      security:
        - bearer: []
  /v1/automations/stats:
    get:
      operationId: AutomationsController_getStats
      parameters: []
      responses:
        '200':
          description: Returns stats (kpis) for a group of Automations.
      tags:
        - automations
      security:
        - bearer: []
  /v1/automations/{id}:
    get:
      operationId: AutomationsController_findById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Returns the requested Automation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutomationDto'
        '404':
          description: The automation was not found.
      tags:
        - automations
      security:
        - bearer: []
    patch:
      operationId: AutomationsController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAutomationRequestDto'
      responses:
        '204':
          description: Saved changes to the Automation.
      tags:
        - automations
      security:
        - bearer: []
    delete:
      operationId: AutomationsController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Deleted the Automation.
      tags:
        - automations
      security:
        - bearer: []
  /v1/automations/{id}/status:
    patch:
      operationId: AutomationsController_status
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Set Automation status (active or paused).
      tags:
        - automations
      security:
        - bearer: []
  /v1/automations/nodes/entry:
    post:
      operationId: AutomationsController_validateEntryNode
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutomationEntryNodeDto'
      responses:
        '201':
          description: Validator for entry nodes.
        '403':
          description: This action is not permitted.
      tags:
        - automations
      security:
        - bearer: []
  /v1/automations/nodes/action:
    post:
      operationId: AutomationsController_validateActionNode
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutomationActionNodeDto'
      responses:
        '201':
          description: Validator for action nodes.
        '403':
          description: This action is not permitted.
      tags:
        - automations
      security:
        - bearer: []
  /v1/automations/nodes/branch:
    post:
      operationId: AutomationsController_validateBranchNode
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutomationBranchNodeDto'
      responses:
        '201':
          description: Validator for branch nodes.
        '403':
          description: This action is not permitted.
      tags:
        - automations
      security:
        - bearer: []
  /v1/automations/nodes/wait:
    post:
      operationId: AutomationsController_validateWaitNode
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutomationWaitNodeDto'
      responses:
        '201':
          description: Validator for wait nodes.
        '403':
          description: This action is not permitted.
      tags:
        - automations
      security:
        - bearer: []
  /v1/custom-domains:
    post:
      operationId: CustomDomainsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomDomainRequestDto'
      responses:
        '201':
          description: Returns the newly created Custom Domain.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCustomDomainResponseDto'
        '403':
          description: This action is not permitted.
      tags:
        - custom-domains
      security:
        - bearer: []
    get:
      operationId: CustomDomainsController_findAll
      parameters:
        - name: page
          required: false
          in: query
          description: Page number
          schema:
            type: number
        - name: perPage
          required: false
          in: query
          description: Number of items per page
          schema:
            type: number
        - name: sortField
          required: false
          in: query
          description: Field to sort by
          schema:
            type: string
        - name: filterField
          required: false
          in: query
          description: Field to filter by
          schema:
            type: string
        - name: filterValue
          required: false
          in: query
          description: Value to filter by
          schema:
            type: string
        - name: dateRange
          required: false
          in: query
          description: Date range to search for
          schema:
            enum:
              - all_time
              - this_week
              - last_week
              - this_month
              - last_month
              - this_quarter
              - last_quarter
              - this_year
              - last_year
            type: string
        - name: searchString
          required: false
          in: query
          description: Value to search for
          schema:
            type: string
      responses:
        '200':
          description: Returns a list (page) of Custom Domains.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pageableResponse'
      tags:
        - custom-domains
      security:
        - bearer: []
  /v1/custom-domains/{id}/instructions:
    get:
      operationId: CustomDomainsController_getDnsInstructions
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Returns the DNS instructions for the Custom Domain.
        '404':
          description: The custom domain was not found.
      tags:
        - custom-domains
      security:
        - bearer: []
  /v1/custom-domains/{id}/verify:
    get:
      operationId: CustomDomainsController_verify
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Returns the verification status of the Custom Domain.
        '404':
          description: The custom domain was not found.
      tags:
        - custom-domains
      security:
        - bearer: []
  /v1/custom-domains/{id}:
    get:
      operationId: CustomDomainsController_findById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Returns the requested Custom Domain.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomDomainDto'
        '404':
          description: The custom domain was not found.
      tags:
        - custom-domains
      security:
        - bearer: []
    delete:
      operationId: CustomDomainsController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Deleted the Custom Domain.
      tags:
        - custom-domains
      security:
        - bearer: []
  /v1/smart-contracts:
    post:
      operationId: SmartContractsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSmartContractRequestDto'
      responses:
        '201':
          description: Returns the newly created Smart Contract.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSmartContractResponseDto'
        '403':
          description: This action is not permitted.
      tags:
        - smart-contracts
      security:
        - bearer: []
    get:
      operationId: SmartContractsController_findAll
      parameters:
        - name: page
          required: false
          in: query
          description: Page number
          schema:
            type: number
        - name: perPage
          required: false
          in: query
          description: Number of items per page
          schema:
            type: number
        - name: sortField
          required: false
          in: query
          description: Field to sort by
          schema:
            type: string
        - name: filterField
          required: false
          in: query
          description: Field to filter by
          schema:
            type: string
        - name: filterValue
          required: false
          in: query
          description: Value to filter by
          schema:
            type: string
        - name: dateRange
          required: false
          in: query
          description: Date range to search for
          schema:
            enum:
              - all_time
              - this_week
              - last_week
              - this_month
              - last_month
              - this_quarter
              - last_quarter
              - this_year
              - last_year
            type: string
        - name: searchString
          required: false
          in: query
          description: Value to search for
          schema:
            type: string
      responses:
        '200':
          description: Returns a list (page) of Smart Contracts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pageableResponse'
      tags:
        - smart-contracts
      security:
        - bearer: []
  /v1/smart-contracts/{id}:
    get:
      operationId: SmartContractsController_findById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Returns the requested Smart Contract.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SmartContractDto'
        '404':
          description: The Smart Contract was not found.
      tags:
        - smart-contracts
      security:
        - bearer: []
    delete:
      operationId: SmartContractsController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Deleted the smart contract.
      tags:
        - smart-contracts
      security:
        - bearer: []
  /v1/smart-contracts/{id}/status:
    patch:
      operationId: SmartContractsController_status
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Set Smart contract autoimport status (active or paused).
      tags:
        - smart-contracts
      security:
        - bearer: []
  /v1/custom-attributes:
    post:
      operationId: CustomAttributesController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomAttributeRequestDto'
      responses:
        '201':
          description: Returns the newly created Custom Attribute.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCustomAttributeResponseDto'
        '403':
          description: This action is not permitted.
      tags:
        - custom-attributes
      security:
        - bearer: []
    get:
      operationId: CustomAttributesController_findAll
      parameters:
        - name: page
          required: false
          in: query
          description: Page number
          schema:
            type: number
        - name: perPage
          required: false
          in: query
          description: Number of items per page
          schema:
            type: number
        - name: sortField
          required: false
          in: query
          description: Field to sort by
          schema:
            type: string
        - name: filterField
          required: false
          in: query
          description: Field to filter by
          schema:
            type: string
        - name: filterValue
          required: false
          in: query
          description: Value to filter by
          schema:
            type: string
        - name: dateRange
          required: false
          in: query
          description: Date range to search for
          schema:
            enum:
              - all_time
              - this_week
              - last_week
              - this_month
              - last_month
              - this_quarter
              - last_quarter
              - this_year
              - last_year
            type: string
        - name: searchString
          required: false
          in: query
          description: Value to search for
          schema:
            type: string
      responses:
        '200':
          description: Returns a list (page) of Custom Attributes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pageableResponse'
      tags:
        - custom-attributes
      security:
        - bearer: []
  /v1/custom-attributes/{id}:
    get:
      operationId: CustomAttributesController_findById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Returns the requested Custom Attribute.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomAttributeDto'
        '404':
          description: The Custom Attribute was not found.
      tags:
        - custom-attributes
      security:
        - bearer: []
    patch:
      operationId: CustomAttributesController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomAttributeRequestDto'
      responses:
        '204':
          description: Saved changes to the Custom Attribute.
      tags:
        - custom-attributes
      security:
        - bearer: []
    delete:
      operationId: CustomAttributesController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Deleted the Custom Attribute.
      tags:
        - custom-attributes
      security:
        - bearer: []
  /v1/plans:
    post:
      operationId: PlansController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePlanRequestDto'
      responses:
        '201':
          description: Returns the newly created Plan.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePlanResponseDto'
        '403':
          description: This action is not permitted.
      tags:
        - plans
      security:
        - bearer: []
    get:
      operationId: PlansController_findAll
      parameters:
        - name: page
          required: false
          in: query
          description: Page number
          schema:
            type: number
        - name: perPage
          required: false
          in: query
          description: Number of items per page
          schema:
            type: number
        - name: sortField
          required: false
          in: query
          description: Field to sort by
          schema:
            type: string
        - name: filterField
          required: false
          in: query
          description: Field to filter by
          schema:
            type: string
        - name: filterValue
          required: false
          in: query
          description: Value to filter by
          schema:
            type: string
        - name: dateRange
          required: false
          in: query
          description: Date range to search for
          schema:
            enum:
              - all_time
              - this_week
              - last_week
              - this_month
              - last_month
              - this_quarter
              - last_quarter
              - this_year
              - last_year
            type: string
        - name: searchString
          required: false
          in: query
          description: Value to search for
          schema:
            type: string
      responses:
        '200':
          description: Returns a list (page) of Plans.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pageableResponse'
      tags:
        - plans
      security:
        - bearer: []
  /v1/plans/{id}:
    get:
      operationId: PlansController_findById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Returns the requested Plan.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanDto'
        '404':
          description: The Plan was not found.
      tags:
        - plans
      security:
        - bearer: []
    patch:
      operationId: PlansController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePlanRequestDto'
      responses:
        '204':
          description: Saved changes to the plan profile.
      tags:
        - plans
      security:
        - bearer: []
    delete:
      operationId: PlansController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Deleted the plan.
      tags:
        - plans
      security:
        - bearer: []
  /v1/files/s3-presigned-url:
    post:
      operationId: FilesController_generateS3PresignedUrl
      parameters: []
      responses:
        '200':
          description: Generates a presigned URL for uploading a file to S3.
        '201':
          description: ''
      tags:
        - files
      security:
        - bearer: []
  /v1/files:
    get:
      operationId: FilesController_listS3Files
      parameters: []
      responses:
        '200':
          description: List files in an S3 bucket.
      tags:
        - files
      security:
        - bearer: []
    delete:
      operationId: FilesController_deleteS3File
      parameters: []
      responses:
        '200':
          description: Deletes a file from the S3 bucket for a specific user.
      tags:
        - files
      security:
        - bearer: []
  /v1/communities/my-community:
    get:
      operationId: CommunitiesController_findByTenant
      parameters: []
      responses:
        '200':
          description: Returns the tenants Community page details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunityDto'
        '404':
          description: The Community was not found.
      tags:
        - communities
      security:
        - bearer: []
  /v1/communities/slug/{slug}:
    get:
      operationId: CommunitiesController_findBySlug
      parameters:
        - name: slug
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Returns the Community by slug.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunityDto'
        '404':
          description: The Community was not found.
      tags:
        - communities
      security:
        - bearer: []
  /v1/communities/{id}:
    get:
      operationId: CommunitiesController_findById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Returns the Community by Id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommunityDto'
        '404':
          description: The Community was not found.
      tags:
        - communities
      security:
        - bearer: []
    patch:
      operationId: CommunitiesController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCommunityRequestDto'
      responses:
        '204':
          description: Saved changes to the community profile.
      tags:
        - communities
      security:
        - bearer: []
  /v1/communities:
    get:
      operationId: CommunitiesController_findAll
      parameters:
        - name: page
          required: false
          in: query
          description: Page number
          schema:
            type: number
        - name: perPage
          required: false
          in: query
          description: Number of items per page
          schema:
            type: number
        - name: sortField
          required: false
          in: query
          description: Field to sort by
          schema:
            type: string
        - name: filterField
          required: false
          in: query
          description: Field to filter by
          schema:
            type: string
        - name: filterValue
          required: false
          in: query
          description: Value to filter by
          schema:
            type: string
        - name: dateRange
          required: false
          in: query
          description: Date range to search for
          schema:
            enum:
              - all_time
              - this_week
              - last_week
              - this_month
              - last_month
              - this_quarter
              - last_quarter
              - this_year
              - last_year
            type: string
        - name: searchString
          required: false
          in: query
          description: Value to search for
          schema:
            type: string
      responses:
        '200':
          description: Returns a list (page) of Custom Attributes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pageableResponse'
      tags:
        - communities
      security:
        - bearer: []
  /v1/widgets:
    post:
      operationId: WidgetsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWidgetRequestDto'
      responses:
        '201':
          description: Returns the newly created Widget.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateWidgetResponseDto'
      tags:
        - widgets
      security:
        - bearer: []
    get:
      operationId: WidgetsController_findAll
      parameters:
        - name: page
          required: false
          in: query
          description: Page number
          schema:
            type: number
        - name: perPage
          required: false
          in: query
          description: Number of items per page
          schema:
            type: number
        - name: sortField
          required: false
          in: query
          description: Field to sort by
          schema:
            type: string
        - name: filterField
          required: false
          in: query
          description: Field to filter by
          schema:
            type: string
        - name: filterValue
          required: false
          in: query
          description: Value to filter by
          schema:
            type: string
        - name: dateRange
          required: false
          in: query
          description: Date range to search for
          schema:
            enum:
              - all_time
              - this_week
              - last_week
              - this_month
              - last_month
              - this_quarter
              - last_quarter
              - this_year
              - last_year
            type: string
        - name: searchString
          required: false
          in: query
          description: Value to search for
          schema:
            type: string
      responses:
        '200':
          description: Returns a list (page) of Widgets.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pageableResponse'
      tags:
        - widgets
      security:
        - bearer: []
  /v1/widgets/{id}:
    get:
      operationId: WidgetsController_find
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Returns a widget by id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WidgetDto'
      tags:
        - widgets
      security:
        - bearer: []
    delete:
      operationId: WidgetsController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Deleted the widget.
      tags:
        - widgets
      security:
        - bearer: []
  /v1/billing/pricing-grid:
    get:
      operationId: BillingController_getPricingGrid
      parameters: []
      responses:
        '200':
          description: Returns the pricing grid options
      tags:
        - billing
      security:
        - bearer: []
  /v1/billing/invoices:
    get:
      operationId: BillingController_getInvoices
      parameters: []
      responses:
        '200':
          description: Returns a list of invoices for the tenant
      tags:
        - billing
      security:
        - bearer: []
  /v1/billing/session/{sessionId}:
    get:
      operationId: BillingController_getCheckoutSession
      parameters:
        - name: sessionId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Returns the checkout session
      tags:
        - billing
      security:
        - bearer: []
  /v1/billing/quotas:
    get:
      operationId: BillingController_getQuotas
      parameters: []
      responses:
        '200':
          description: Returns quotas for the tenant
      tags:
        - billing
      security:
        - bearer: []
  /v1/billing/checkout/{priceId}:
    post:
      operationId: BillingController_startCheckout
      parameters:
        - name: priceId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Starts a stripe checkout flow
        '201':
          description: ''
      tags:
        - billing
      security:
        - bearer: []
  /v1/billing/change-summary/{planId}:
    get:
      operationId: BillingController_changeSummary
      parameters:
        - name: planId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Obtain a billing summary before switching to a new plan.
      tags:
        - billing
      security:
        - bearer: []
  /v1/billing/change/{planId}:
    get:
      operationId: BillingController_changePlan
      parameters:
        - name: planId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Switch to a new plan.
      tags:
        - billing
      security:
        - bearer: []
  /v1/billing/cancel-downgrade:
    post:
      operationId: BillingController_cancelDowngrade
      parameters: []
      responses:
        '200':
          description: Cancel a pending downgrade.
        '201':
          description: ''
          content:
            application/json:
              schema:
                type: object
      tags:
        - billing
      security:
        - bearer: []
  /v1/billing/access-portal:
    post:
      operationId: BillingController_accessPortal
      parameters: []
      responses:
        '200':
          description: Redirect user to stripe billing portal
        '201':
          description: ''
      tags:
        - billing
      security:
        - bearer: []
  /v1/billing/process-events:
    post:
      operationId: BillingController_processEvents
      parameters: []
      responses:
        '200':
          description: Listens for stripe webhook events
        '201':
          description: ''
      tags:
        - billing
      security:
        - bearer: []
  /v1/applets:
    post:
      operationId: AppletsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAppletRequestDto'
      responses:
        '201':
          description: Returns the newly created Applet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAppletResponseDto'
        '403':
          description: This action is not permitted.
      tags:
        - applets
      security:
        - bearer: []
    get:
      operationId: AppletsController_findAll
      parameters:
        - name: page
          required: false
          in: query
          description: Page number
          schema:
            type: number
        - name: perPage
          required: false
          in: query
          description: Number of items per page
          schema:
            type: number
        - name: sortField
          required: false
          in: query
          description: Field to sort by
          schema:
            type: string
        - name: filterField
          required: false
          in: query
          description: Field to filter by
          schema:
            type: string
        - name: filterValue
          required: false
          in: query
          description: Value to filter by
          schema:
            type: string
        - name: dateRange
          required: false
          in: query
          description: Date range to search for
          schema:
            enum:
              - all_time
              - this_week
              - last_week
              - this_month
              - last_month
              - this_quarter
              - last_quarter
              - this_year
              - last_year
            type: string
        - name: searchString
          required: false
          in: query
          description: Value to search for
          schema:
            type: string
      responses:
        '200':
          description: Returns a list (page) of Applets.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pageableResponse'
      tags:
        - applets
      security:
        - bearer: []
  /v1/applets/{id}:
    get:
      operationId: AppletsController_findById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Returns the requested Applet.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppletDto'
        '404':
          description: The Applet was not found.
      tags:
        - applets
      security:
        - bearer: []
    patch:
      operationId: AppletsController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAppletRequestDto'
      responses:
        '204':
          description: Saved changes to the applet.
      tags:
        - applets
      security:
        - bearer: []
    delete:
      operationId: AppletsController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Deleted the applet.
      tags:
        - applets
      security:
        - bearer: []
  /v1/autodrafts:
    post:
      operationId: AutodraftsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAutodraftRequestDto'
      responses:
        '201':
          description: Returns the newly created Autodraft.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAutodraftResponseDto'
        '403':
          description: This action is not permitted.
      tags:
        - autodrafts
      security:
        - bearer: []
    get:
      operationId: AutodraftsController_findAll
      parameters:
        - name: page
          required: false
          in: query
          description: Page number
          schema:
            type: number
        - name: perPage
          required: false
          in: query
          description: Number of items per page
          schema:
            type: number
        - name: sortField
          required: false
          in: query
          description: Field to sort by
          schema:
            type: string
        - name: filterField
          required: false
          in: query
          description: Field to filter by
          schema:
            type: string
        - name: filterValue
          required: false
          in: query
          description: Value to filter by
          schema:
            type: string
        - name: dateRange
          required: false
          in: query
          description: Date range to search for
          schema:
            enum:
              - all_time
              - this_week
              - last_week
              - this_month
              - last_month
              - this_quarter
              - last_quarter
              - this_year
              - last_year
            type: string
        - name: searchString
          required: false
          in: query
          description: Value to search for
          schema:
            type: string
      responses:
        '200':
          description: Returns a list (page) of Autodrafts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pageableResponse'
      tags:
        - autodrafts
      security:
        - bearer: []
  /v1/autodrafts/{id}:
    get:
      operationId: AutodraftsController_findById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Returns the Autodraft with the given id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutodraftDto'
        '404':
          description: Autodraft not found.
      tags:
        - autodrafts
      security:
        - bearer: []
    patch:
      operationId: AutodraftsController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAutodraftRequestDto'
      responses:
        '200':
          description: Returns the updated Autodraft.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutodraftDto'
        '204':
          description: ''
          content:
            application/json:
              schema:
                type: object
        '403':
          description: This action is not permitted.
        '404':
          description: Autodraft not found.
      tags:
        - autodrafts
      security:
        - bearer: []
    delete:
      operationId: AutodraftsController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Autodraft successfully deleted.
        '403':
          description: This action is not permitted.
        '404':
          description: Autodraft not found.
      tags:
        - autodrafts
      security:
        - bearer: []
  /v1/ai/check-ethermail-like:
    post:
      operationId: AIController_checkEtherMailLike
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckEtherMailLikeRequestDto'
      responses:
        '201':
          description: Returns if label is EtherMail-like string.
        '403':
          description: This action is not permitted.
      tags:
        - ai
      security:
        - bearer: []
  /v1/apc/verify:
    post:
      operationId: ApcController_getAntiPishing
      parameters: []
      responses:
        '200':
          description: Returns the Anti Pishing data.
        '201':
          description: ''
        '404':
          description: The contact was not found.
      tags:
        - apc
      security:
        - bearer: []
  /v1/apc/update:
    post:
      operationId: ApcController_updateAntiPhishing
      parameters: []
      responses:
        '204':
          description: Saved Anti Phishing data to the Contact
      tags:
        - apc
      security:
        - bearer: []
  /v1/email-airdrop:
    get:
      operationId: EmailAirdropController_getEmailAirdrop
      parameters: []
      responses:
        '200':
          description: ''
        '201':
          description: Gets the data of an email airdrop from it's entity ID.
      tags:
        - email-airdrop
      security:
        - bearer: []
    post:
      operationId: EmailAirdropController_createEmailAirdrop
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEmailAirdropDto'
      responses:
        '201':
          description: Returns newly created Email Airdrop entity.
      tags:
        - email-airdrop
      security:
        - bearer: []
  /v1/email-airdrop/tenant-new-fund-account:
    get:
      operationId: EmailAirdropController_getNewTenantFundAddress
      parameters: []
      responses:
        '200':
          description: ''
        '201':
          description: >-
            Gets new account by latest airdrop index from tenant HDNode, if no
            seed phrase, it is created.
      tags:
        - email-airdrop
      security:
        - bearer: []
  /v1/email-airdrop/transfer/{id}/{paymail_id}:
    post:
      operationId: EmailAirdropController_transfer
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: paymail_id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: >-
            Checks conditions, transfers amount to claiming user and sums up
            claim on Email Airdrop.
      tags:
        - email-airdrop
      security:
        - bearer: []
    get:
      operationId: EmailAirdropController_getTransfer
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: paymail_id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
        '201':
          description: Gets Email Airdrop Paymail.
      tags:
        - email-airdrop
      security:
        - bearer: []
  /v1/email-airdrop/return-surplus:
    post:
      operationId: EmailAirdropController_returnSurplus
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReturnSurplusDto'
      responses:
        '201':
          description: >-
            Returns remaining funds to Tenant Surplus Recipient on Email
            Airdrop.
      tags:
        - email-airdrop
      security:
        - bearer: []
  /v1/email-airdrop/change-surplus-recipient:
    post:
      operationId: EmailAirdropController_changeSurplusRecipient
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeSurplusRecipientDto'
      responses:
        '201':
          description: Changes Email Airdrop surplus recipient.
      tags:
        - email-airdrop
      security:
        - bearer: []
  /v1/email-airdrop/{airdrop_id}/import-recipients:
    post:
      operationId: EmailAirdropController_importRecipients
      parameters:
        - name: airdrop_id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportAirdropRecipientsDto'
      responses:
        '201':
          description: Import contacts with Email Airdrop data records.
      tags:
        - email-airdrop
      security:
        - bearer: []
  /v1/email-airdrop/token-proxy-address/{chain}:
    get:
      operationId: EmailAirdropController_getTokenProxyAddressForChain
      parameters:
        - name: chain
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
        '201':
          description: Return EtherMailTokenProxyAddress by chain label.
      tags:
        - email-airdrop
      security:
        - bearer: []
  /v1/email-airdrop/token-proxy-addresses:
    get:
      operationId: EmailAirdropController_getTokenProxyAddressesByChain
      parameters: []
      responses:
        '200':
          description: ''
        '201':
          description: Return EtherMailTokenProxyAddresses.
      tags:
        - email-airdrop
      security:
        - bearer: []
  /v1/email-airdrop/{airdropId}/create-token-proxy-airdrop:
    post:
      operationId: EmailAirdropController_createTokenProxyAirdrop
      parameters:
        - name: airdropId
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: Creates a job for creating Airdorp on TokenProxySmartContract.
      tags:
        - email-airdrop
      security:
        - bearer: []
  /v1/email-airdrop/token-proxy-valid/{chain}/{address}:
    get:
      operationId: EmailAirdropController_getTokenProxyValidAddress
      parameters:
        - name: chain
          required: true
          in: path
          schema:
            type: string
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
        '201':
          description: Creates a job for creating Airdorp on TokenProxySmartContract.
      tags:
        - email-airdrop
      security:
        - bearer: []
  /viral-snippets:
    post:
      operationId: ViralSnippetController_saveViralSnippet
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ViralSnippetDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                type: object
  /viral-snippets/{uuid}:
    get:
      operationId: ViralSnippetController_getViralSnippet
      parameters:
        - name: uuid
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
  /v1/read-to-earn/{id}:
    get:
      operationId: ReadToEarnController_previewEmail
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Preview email
      tags:
        - read-to-earn
      security:
        - bearer: []
  /v1/disappearing-emails:
    post:
      operationId: DisappearingEmailsController_createDisappearingEmail
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDisappearingEmailDto'
      responses:
        '201':
          description: Creates a new disappearing email.
      tags:
        - disappearing-emails
      security:
        - bearer: []
  /v1/disappearing-emails/{email_id}:
    delete:
      operationId: DisappearingEmailsController_removeEmailDisappearingEmail
      parameters:
        - name: email_id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
        '201':
          description: Removes disappearing email feature, if existing, for the email.
      tags:
        - disappearing-emails
      security:
        - bearer: []
  /v1/ad-contact-metadata/{id}:
    delete:
      operationId: AdContactMetadataController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: Deleted the Ad contact metadata.
      tags:
        - ad-contact-metadata
      security:
        - bearer: []
  /v1/emt-staking:
    get:
      operationId: EmtStakingController_getEMTStakingConfig
      parameters: []
      responses:
        '200':
          description: ''
        '201':
          description: Returns EMTStaking SC Config data.
      tags:
        - emt-staking
      security:
        - bearer: []
  /v1/emt-staking/deposit-signature:
    post:
      operationId: EmtStakingController_getTenantDepositAuthorizerSignature
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmtDepositAuthorizationDto'
      responses:
        '201':
          description: Returns signature for Tenant deposit for EMTStaking SC.
      tags:
        - emt-staking
      security:
        - bearer: []
  /v1/emt-staking/start-withdraw:
    post:
      operationId: EmtStakingController_withdrawPetition
      parameters: []
      responses:
        '201':
          description: >-
            Save withdraw start by tenant for latter process after lock period
            and sends email to monitoring users.
      tags:
        - emt-staking
      security:
        - bearer: []
  /v1/auth/login:
    post:
      operationId: AuthController_signIn
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestDto'
      responses:
        '200':
          description: >-
            Returns a session JWT for the authenticated user along with the user
            object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponseDto'
        '201':
          description: ''
      tags:
        - auth
  /v1/auth/verify:
    post:
      operationId: AuthController_verify
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyRequestDto'
      responses:
        '200':
          description: Returns the decoded access token if it's valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyResponseDto'
        '201':
          description: ''
      tags:
        - auth
  /v1/auth/impersonate:
    post:
      operationId: AuthController_impersonate
      parameters: []
      responses:
        '200':
          description: Returns the decoded access token if it's valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyResponseDto'
        '201':
          description: ''
      tags:
        - auth
  /v1/auth/reset-password:
    post:
      operationId: AuthController_resetPassword
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequestDto'
      responses:
        '200':
          description: Send a password reset link.
        '201':
          description: ''
      tags:
        - auth
  /v1/auth/set-new-password:
    post:
      operationId: AuthController_setNewPassword
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetNewPasswordRequestDto'
      responses:
        '200':
          description: Set a new password.
        '201':
          description: ''
      tags:
        - auth
info:
  title: EtherMail EMS API
  description: API for EtherMail Enterprise Mail Solution
  version: '1.0'
  contact: {}
tags: []
servers:
  - url: hub-gateway.ethermail.io
    description: Production server (uses live data)
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
      description: Enter JWT token
    api_key:
      type: apiKey
      in: header
      name: x-api-key
  schemas:
    ObjectId:
      type: object
      properties: {}
    CreateTenantRequestDto:
      type: object
      properties:
        admin_first_name:
          type: string
          description: The admins first name.
          example: John
          minLength: 2
        admin_last_name:
          type: string
          description: The admins last name.
          example: Doe
          minLength: 2
        admin_email:
          type: string
          description: The admins e-mail address.
          example: john@acme.com
        billing_name:
          type: string
          description: The billing name.
          minLength: 2
        name:
          type: string
          description: The tenant organizations name.
          example: Acme Corporation
          minLength: 3
          maxLength: 50
        afid:
          description: The tenants affiliate id.
          example: 65159479ae650bdb53001438
          allOf:
            - $ref: '#/components/schemas/ObjectId'
        address:
          type: string
          description: The tenant organizations address.
          example: 123 Main St, Anytown, USA
          minLength: 8
          maxLength: 50
        city:
          type: string
          description: The tenant organizations city.
          minLength: 3
          maxLength: 50
        state:
          type: string
          description: The tenant organizations state.
          minLength: 2
          maxLength: 50
        country:
          type: string
          description: The tenant organizations country.
          minLength: 2
        postal_code:
          type: string
          description: The tenant organizations postal code.
          minLength: 5
          maxLength: 10
        phone:
          type: string
          description: The tenant organizations phone number.
          example: (123) 456-7890
          minLength: 9
          maxLength: 10
        plan_id:
          description: The tanant organizations plan.
          example: free
          allOf:
            - $ref: '#/components/schemas/ObjectId'
        stripe_customer_id:
          type: string
          description: The tenant organizations stripe customer id.
          example: cus_1234567890
        stripe_subscription_id:
          type: string
          description: The tenant organizations stripe subscription id.
          example: sub_1234567890
        stripe_price_id:
          type: string
          description: The tenant organizations stripe price id.
          example: price_1234567890
        billing_cycle_anchor:
          format: date-time
          type: string
          description: The billing cycle anchor.
        billing_period_start:
          format: date-time
          type: string
          description: The billing period start.
        billing_card_type:
          type: string
          description: The tenant organizations billing card type.
        billing_card_last4:
          type: string
          description: The tenant organizations billing card last 4 digits.
        is_privileged:
          type: boolean
          description: The tanant has privileged access.
          example: true
        last_warning_sent_date:
          format: date-time
          type: string
        last_limit_sent_date:
          format: date-time
          type: string
      required:
        - admin_first_name
        - admin_last_name
        - admin_email
        - name
        - afid
        - address
        - city
        - state
        - country
        - postal_code
        - phone
        - plan_id
        - stripe_customer_id
        - stripe_subscription_id
        - stripe_price_id
        - is_privileged
    CreateTenantResponseDto:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
          description: The tenant organizations name.
          example: Acme Corporation
          minLength: 3
          maxLength: 50
        afid:
          description: The tenants affiliate id.
          example: 65159479ae650bdb53001438
          allOf:
            - $ref: '#/components/schemas/ObjectId'
        address:
          type: string
          description: The tenant organizations address.
          example: 123 Main St, Anytown, USA
          minLength: 8
          maxLength: 50
        city:
          type: string
          description: The tenant organizations city.
          minLength: 3
          maxLength: 50
        state:
          type: string
          description: The tenant organizations state.
          minLength: 2
          maxLength: 50
        country:
          type: string
          description: The tenant organizations country.
          minLength: 2
        postal_code:
          type: string
          description: The tenant organizations postal code.
          minLength: 5
          maxLength: 10
        phone:
          type: string
          description: The tenant organizations phone number.
          example: (123) 456-7890
          minLength: 9
          maxLength: 10
        plan_id:
          description: The tanant organizations plan.
          example: free
          allOf:
            - $ref: '#/components/schemas/ObjectId'
        stripe_customer_id:
          type: string
          description: The tenant organizations stripe customer id.
          example: cus_1234567890
        stripe_subscription_id:
          type: string
          description: The tenant organizations stripe subscription id.
          example: sub_1234567890
        stripe_price_id:
          type: string
          description: The tenant organizations stripe price id.
          example: price_1234567890
        billing_cycle_anchor:
          format: date-time
          type: string
          description: The billing cycle anchor.
        billing_period_start:
          format: date-time
          type: string
          description: The billing period start.
        billing_card_type:
          type: string
          description: The tenant organizations billing card type.
        billing_card_last4:
          type: string
          description: The tenant organizations billing card last 4 digits.
        is_privileged:
          type: boolean
          description: The tanant has privileged access.
          example: true
        last_warning_sent_date:
          format: date-time
          type: string
        last_limit_sent_date:
          format: date-time
          type: string
      required:
        - _id
        - name
        - afid
        - address
        - city
        - state
        - country
        - postal_code
        - phone
        - plan_id
        - stripe_customer_id
        - stripe_subscription_id
        - stripe_price_id
        - is_privileged
    TenantDto:
      type: object
      properties:
        name:
          type: string
          description: The tenant organizations name.
          example: Acme Corporation
          minLength: 3
          maxLength: 50
        afid:
          description: The tenants affiliate id.
          example: 65159479ae650bdb53001438
          allOf:
            - $ref: '#/components/schemas/ObjectId'
        address:
          type: string
          description: The tenant organizations address.
          example: 123 Main St, Anytown, USA
          minLength: 8
          maxLength: 50
        city:
          type: string
          description: The tenant organizations city.
          minLength: 3
          maxLength: 50
        state:
          type: string
          description: The tenant organizations state.
          minLength: 2
          maxLength: 50
        country:
          type: string
          description: The tenant organizations country.
          minLength: 2
        postal_code:
          type: string
          description: The tenant organizations postal code.
          minLength: 5
          maxLength: 10
        phone:
          type: string
          description: The tenant organizations phone number.
          example: (123) 456-7890
          minLength: 9
          maxLength: 10
        plan_id:
          description: The tanant organizations plan.
          example: free
          allOf:
            - $ref: '#/components/schemas/ObjectId'
        stripe_customer_id:
          type: string
          description: The tenant organizations stripe customer id.
          example: cus_1234567890
        stripe_subscription_id:
          type: string
          description: The tenant organizations stripe subscription id.
          example: sub_1234567890
        stripe_price_id:
          type: string
          description: The tenant organizations stripe price id.
          example: price_1234567890
        billing_cycle_anchor:
          format: date-time
          type: string
          description: The billing cycle anchor.
        billing_period_start:
          format: date-time
          type: string
          description: The billing period start.
        billing_card_type:
          type: string
          description: The tenant organizations billing card type.
        billing_card_last4:
          type: string
          description: The tenant organizations billing card last 4 digits.
        is_privileged:
          type: boolean
          description: The tanant has privileged access.
          example: true
        last_warning_sent_date:
          format: date-time
          type: string
        last_limit_sent_date:
          format: date-time
          type: string
      required:
        - name
        - afid
        - address
        - city
        - state
        - country
        - postal_code
        - phone
        - plan_id
        - stripe_customer_id
        - stripe_subscription_id
        - stripe_price_id
        - is_privileged
    pageableResponse:
      type: object
      properties:
        records:
          type: array
          items:
            $ref: '#/components/schemas/AutodraftDto'
        pagination:
          type: object
          properties:
            count:
              type: number
            pages:
              type: number
            starting:
              type: number
            ending:
              type: number
            previous:
              type: boolean
            next:
              type: boolean
          required:
            - count
            - pages
            - starting
            - ending
            - previous
            - next
      required:
        - records
        - pagination
    AccessKeysResponseDto:
      type: object
      properties:
        api_key:
          type: string
        api_secret:
          type: string
      required:
        - api_key
        - api_secret
    ManageAccessKeysRequestDto:
      type: object
      properties:
        action:
          type: string
          description: |-
            Whether you want to generate/reset, or delete the existing keys.
            The value must be either 'generate' or 'delete'.
          example: generate
          enum:
            - generate
            - revoke
      required:
        - action
    UpdateTenantRequestDto:
      type: object
      properties:
        name:
          type: string
          description: The tenant organizations name.
          example: Acme Corporation
          minLength: 3
          maxLength: 50
        afid:
          description: The tenants affiliate id.
          example: 65159479ae650bdb53001438
          allOf:
            - $ref: '#/components/schemas/ObjectId'
        address:
          type: string
          description: The tenant organizations address.
          example: 123 Main St, Anytown, USA
          minLength: 8
          maxLength: 50
        city:
          type: string
          description: The tenant organizations city.
          minLength: 3
          maxLength: 50
        state:
          type: string
          description: The tenant organizations state.
          minLength: 2
          maxLength: 50
        country:
          type: string
          description: The tenant organizations country.
          minLength: 2
        postal_code:
          type: string
          description: The tenant organizations postal code.
          minLength: 5
          maxLength: 10
        phone:
          type: string
          description: The tenant organizations phone number.
          example: (123) 456-7890
          minLength: 9
          maxLength: 10
        plan_id:
          description: The tanant organizations plan.
          example: free
          allOf:
            - $ref: '#/components/schemas/ObjectId'
        stripe_customer_id:
          type: string
          description: The tenant organizations stripe customer id.
          example: cus_1234567890
        stripe_subscription_id:
          type: string
          description: The tenant organizations stripe subscription id.
          example: sub_1234567890
        stripe_price_id:
          type: string
          description: The tenant organizations stripe price id.
          example: price_1234567890
        billing_cycle_anchor:
          format: date-time
          type: string
          description: The billing cycle anchor.
        billing_period_start:
          format: date-time
          type: string
          description: The billing period start.
        billing_card_type:
          type: string
          description: The tenant organizations billing card type.
        billing_card_last4:
          type: string
          description: The tenant organizations billing card last 4 digits.
        is_privileged:
          type: boolean
          description: The tanant has privileged access.
          example: true
        last_warning_sent_date:
          format: date-time
          type: string
        last_limit_sent_date:
          format: date-time
          type: string
    UpdateTenantSettingsDto:
      type: object
      properties:
        name:
          type: string
          description: The tenant organizations name.
          example: Acme Corporation
          minLength: 3
          maxLength: 50
        unsubscribe_text:
          type: string
          description: The tenants unsubscribe text.
          example: Acme Corporation
          minLength: 3
          maxLength: 200
        default_sender_name:
          type: string
          description: The tenants default sender name.
          example: Acme Corporation
          minLength: 3
        default_sender_alias:
          type: string
          description: The tenants default sender alias.
          example: noreply
          pattern: /^[a-zA-Z0-9._-]+$/
        default_sender_domain_id:
          description: The tenants default sender domain id
          allOf:
            - $ref: '#/components/schemas/ObjectId'
      required:
        - name
        - unsubscribe_text
    CreateUserRequestDto:
      type: object
      properties:
        tenant_id:
          $ref: '#/components/schemas/ObjectId'
        first_name:
          type: string
          example: John
          minLength: 2
        last_name:
          type: string
          example: Doe
          minLength: 2
        wallet_address:
          type: string
          example: '0x946D14C27C9129C367442E3d0E6a9e70757D5D33'
        email:
          type: string
          example: john@acme.com
        role:
          type: string
          description: The users role (can be admin or user)
          example: admin
          enum:
            - editor
            - marketer
            - admin
            - global_admin
            - super_admin
        password:
          type: string
          example: '123456789'
          minLength: 9
      required:
        - first_name
        - last_name
        - email
        - role
    CreateUserResponseDto:
      type: object
      properties:
        _id:
          type: string
        tenant_id:
          $ref: '#/components/schemas/ObjectId'
        first_name:
          type: string
          example: John
          minLength: 2
        last_name:
          type: string
          example: Doe
          minLength: 2
        wallet_address:
          type: string
          example: '0x946D14C27C9129C367442E3d0E6a9e70757D5D33'
        email:
          type: string
          example: john@acme.com
        role:
          type: string
          description: The users role (can be admin or user)
          example: admin
          enum:
            - editor
            - marketer
            - admin
            - global_admin
            - super_admin
        password:
          type: string
          example: '123456789'
          minLength: 9
      required:
        - _id
        - first_name
        - last_name
        - email
        - role
    UserDto:
      type: object
      properties:
        tenant_id:
          $ref: '#/components/schemas/ObjectId'
        first_name:
          type: string
          example: John
          minLength: 2
        last_name:
          type: string
          example: Doe
          minLength: 2
        wallet_address:
          type: string
          example: '0x946D14C27C9129C367442E3d0E6a9e70757D5D33'
        email:
          type: string
          example: john@acme.com
        role:
          description: The users role (can be admin or user)
          example: admin
          enum:
            - editor
            - marketer
            - admin
            - global_admin
            - super_admin
          type: string
        password:
          type: string
          example: '123456789'
          minLength: 9
      required:
        - first_name
        - last_name
        - email
        - role
    ChangePasswordDto:
      type: object
      properties:
        current_password:
          type: string
        new_password:
          type: string
        confirm_password:
          type: string
      required:
        - current_password
        - new_password
        - confirm_password
    ChangeEmailDto:
      type: object
      properties:
        confirm_token:
          type: string
      required:
        - confirm_token
    SendConfirmEmailRequestDto:
      type: object
      properties:
        new_email:
          type: string
      required:
        - new_email
    UpdateUserRequestDto:
      type: object
      properties:
        tenant_id:
          $ref: '#/components/schemas/ObjectId'
        first_name:
          type: string
          example: John
          minLength: 2
        last_name:
          type: string
          example: Doe
          minLength: 2
        email:
          type: string
          example: john@acme.com
        role:
          type: string
          description: The users role (can be admin or user)
          example: admin
          enum:
            - editor
            - marketer
            - admin
            - global_admin
            - super_admin
    ContactAttributeDto:
      type: object
      properties:
        custom_attribute_id:
          description: The id of the related custom attribute
          allOf:
            - $ref: '#/components/schemas/ObjectId'
        value:
          type: object
          description: The value of this contact attribute
      required:
        - custom_attribute_id
        - value
    CreateContactRequestDto:
      type: object
      properties:
        email:
          type: string
          description: The contact's email.
          example: john.doe@example.com
        first_name:
          type: string
          description: The contact's first name.
          example: John
        last_name:
          type: string
          description: The contact's last name.
          example: Doe
        afid:
          description: The contact's ethermail afid
          example: '0x946D14C27C9129C367442E3d0E6a9e70757D5D33'
          allOf:
            - $ref: '#/components/schemas/ObjectId'
        wallet_address:
          type: string
          example: '0x946D14C27C9129C367442E3d0E6a9e70757D5D33'
        lists:
          description: The contact belongs to.
          type: array
          items:
            type: string
        custom_attributes:
          description: Contact's custom attributes.
          type: array
          items:
            $ref: '#/components/schemas/ContactAttributeDto'
        origin:
          type: string
          description: Contact comes from EtherMail's onboarding
        anti_phishing_code:
          type: string
        anti_phishing_color:
          type: number
        subscriber:
          type: boolean
      required:
        - email
        - wallet_address
    CreateContactResponseDto:
      type: object
      properties:
        _id:
          type: string
        email:
          type: string
          description: The contact's email.
          example: john.doe@example.com
        first_name:
          type: string
          description: The contact's first name.
          example: John
        last_name:
          type: string
          description: The contact's last name.
          example: Doe
        afid:
          description: The contact's ethermail afid
          example: '0x946D14C27C9129C367442E3d0E6a9e70757D5D33'
          allOf:
            - $ref: '#/components/schemas/ObjectId'
        wallet_address:
          type: string
          example: '0x946D14C27C9129C367442E3d0E6a9e70757D5D33'
        lists:
          description: The contact belongs to.
          type: array
          items:
            type: string
        custom_attributes:
          description: Contact's custom attributes.
          type: array
          items:
            $ref: '#/components/schemas/ContactAttributeDto'
        origin:
          type: string
          description: Contact comes from EtherMail's onboarding
        anti_phishing_code:
          type: string
        anti_phishing_color:
          type: number
        subscriber:
          type: boolean
      required:
        - _id
        - email
        - wallet_address
    ContactDto:
      type: object
      properties:
        email:
          type: string
          description: The contact's email.
          example: john.doe@example.com
        first_name:
          type: string
          description: The contact's first name.
          example: John
        last_name:
          type: string
          description: The contact's last name.
          example: Doe
        afid:
          description: The contact's ethermail afid
          example: '0x946D14C27C9129C367442E3d0E6a9e70757D5D33'
          allOf:
            - $ref: '#/components/schemas/ObjectId'
        wallet_address:
          type: string
          example: '0x946D14C27C9129C367442E3d0E6a9e70757D5D33'
        lists:
          description: The contact belongs to.
          type: array
          items:
            type: string
        custom_attributes:
          description: Contact's custom attributes.
          type: array
          items:
            $ref: '#/components/schemas/ContactAttributeDto'
        origin:
          type: string
          description: Contact comes from EtherMail's onboarding
        anti_phishing_code:
          type: string
        anti_phishing_color:
          type: number
        subscriber:
          type: boolean
      required:
        - email
        - wallet_address
    UpdateContactRequestDto:
      type: object
      properties:
        do_not_contact:
          type: boolean
          description: Do not contact
        do_not_contact_reason:
          type: string
          minLength: 5
          description: Do not contact reason
        tenant_id:
          type: string
          description: Tenant id
        last_email_opened:
          format: date-time
          type: string
          description: Contact latest email opened date
        last_email_clicked:
          format: date-time
          type: string
          description: Contact latest email clicked date
        email:
          type: string
          description: The contact's email.
          example: john.doe@example.com
        first_name:
          type: string
          description: The contact's first name.
          example: John
        last_name:
          type: string
          description: The contact's last name.
          example: Doe
        afid:
          description: The contact's ethermail afid
          example: '0x946D14C27C9129C367442E3d0E6a9e70757D5D33'
          allOf:
            - $ref: '#/components/schemas/ObjectId'
        wallet_address:
          type: string
          example: '0x946D14C27C9129C367442E3d0E6a9e70757D5D33'
        lists:
          description: The contact belongs to.
          type: array
          items:
            type: string
        custom_attributes:
          description: Contact's custom attributes.
          type: array
          items:
            $ref: '#/components/schemas/ContactAttributeDto'
        origin:
          type: string
          description: Contact comes from EtherMail's onboarding
        anti_phishing_code:
          type: string
        anti_phishing_color:
          type: number
        subscriber:
          type: boolean
    BulkDeleteContactsRequestDto:
      type: object
      properties:
        contacts:
          description: Contacts that are being deleted in bulk.
          type: array
          items:
            type: string
      required:
        - contacts
    SubscriptionRequestDto:
      type: object
      properties:
        email:
          type: string
          description: The contact's email.
          example: john.doe@example.com
        wallet_address:
          type: string
          example: '0x946D14C27C9129C367442E3d0E6a9e70757D5D33'
        widget:
          type: string
          description: Widget ID.
      required:
        - email
        - wallet_address
        - widget
    CreateTemplateRequestDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the email template.
          example: Welcome Email
          minLength: 5
        html:
          type: string
          description: The html of the email template.
        json:
          type: string
          description: The json of the email template.
        supports_ai_content:
          type: boolean
          description: >-
            Whether the email template supports AI content (e.g. has an AI
            content block).
        version:
          type: number
          description: The version of the email template.
        default_subject:
          type: string
          description: Default subject of the email template.
      required:
        - name
        - html
    CreateTemplateResponseDto:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
          description: The name of the email template.
          example: Welcome Email
          minLength: 5
        html:
          type: string
          description: The html of the email template.
        json:
          type: string
          description: The json of the email template.
        supports_ai_content:
          type: boolean
          description: >-
            Whether the email template supports AI content (e.g. has an AI
            content block).
        version:
          type: number
          description: The version of the email template.
        default_subject:
          type: string
          description: Default subject of the email template.
      required:
        - _id
        - name
        - html
    TemplateDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the email template.
          example: Welcome Email
          minLength: 5
        html:
          type: string
          description: The html of the email template.
        json:
          type: string
          description: The json of the email template.
        supports_ai_content:
          type: boolean
          description: >-
            Whether the email template supports AI content (e.g. has an AI
            content block).
        version:
          type: number
          description: The version of the email template.
        default_subject:
          type: string
          description: Default subject of the email template.
      required:
        - name
        - html
    UpdateTemplateRequestDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the email template.
          example: Welcome Email
          minLength: 5
        html:
          type: string
          description: The html of the email template.
        json:
          type: string
          description: The json of the email template.
        supports_ai_content:
          type: boolean
          description: >-
            Whether the email template supports AI content (e.g. has an AI
            content block).
        version:
          type: number
          description: The version of the email template.
        default_subject:
          type: string
          description: Default subject of the email template.
    CreateEmailRequestDto:
      type: object
      properties:
        type:
          type: string
          description: The type of email
          minLength: 5
        name:
          type: string
          description: The name of the email.
          minLength: 5
        subject:
          type: string
          description: The subject of the email.
          minLength: 5
        sender_name:
          type: string
          description: The name of the sender.
          minLength: 3
        sender_alias:
          type: string
          description: The alias of the sender.
          pattern: /^[a-zA-Z0-9._-]+$/
        sender_domain_id:
          type: string
          description: The domain of the sender.
        objective:
          type: string
          description: The objective of the ad email.
          enum:
            - reach
            - awareness
            - dynamic_ad
        budget:
          type: number
          description: The budget of the ad email.
        target_audience:
          type: object
          description: The target audience of the email.
        target_lists:
          description: The lists of recipients you wish to target.
          type: array
          items:
            type: string
        target_segments:
          description: The segments of recipients you wish to target.
          type: array
          items:
            type: string
        html:
          type: string
          description: The html body of the email.
          minLength: 5
        json:
          type: string
          description: The json of the email.
        version:
          type: number
          description: The version of the email.
        send_now:
          type: boolean
          description: Whether to send the email now or later
        send_date:
          format: date-time
          type: string
          description: The send date of the email.
        status:
          type: object
          description: The status of the email.
        disappear_in:
          type: number
          minimum: 1
          maximum: 31
        email_enhancers:
          type: object
      required:
        - type
        - name
        - subject
        - sender_name
        - sender_alias
        - sender_domain_id
        - objective
        - budget
        - target_audience
        - target_lists
        - target_segments
        - html
        - send_now
        - send_date
        - status
        - disappear_in
        - email_enhancers
    CreateEmailResponseDto:
      type: object
      properties:
        _id:
          type: string
        kpi_sent:
          type: string
          description: The number of times email was sent.
        kpi_opened:
          type: string
          description: The number of times email was opened.
        kpi_clicks:
          type: string
          description: The number of times email was clicked.
        kpi_soft_bounce:
          type: string
          description: The number of times email was soft bounded.
        kpi_hard_bounce:
          type: string
          description: The number of times email was hard bounded.
        kpi_unsubscribed:
          type: string
          description: The number of times email was unsubscribed.
        type:
          type: string
          description: The type of email
          minLength: 5
        name:
          type: string
          description: The name of the email.
          minLength: 5
        subject:
          type: string
          description: The subject of the email.
          minLength: 5
        sender_name:
          type: string
          description: The name of the sender.
          minLength: 3
        sender_alias:
          type: string
          description: The alias of the sender.
          pattern: /^[a-zA-Z0-9._-]+$/
        sender_domain_id:
          type: string
          description: The domain of the sender.
        objective:
          type: string
          description: The objective of the ad email.
          enum:
            - reach
            - awareness
            - dynamic_ad
        budget:
          type: number
          description: The budget of the ad email.
        target_audience:
          type: object
          description: The target audience of the email.
        target_lists:
          description: The lists of recipients you wish to target.
          type: array
          items:
            type: string
        target_segments:
          description: The segments of recipients you wish to target.
          type: array
          items:
            type: string
        html:
          type: string
          description: The html body of the email.
          minLength: 5
        json:
          type: string
          description: The json of the email.
        version:
          type: number
          description: The version of the email.
        send_now:
          type: boolean
          description: Whether to send the email now or later
        send_date:
          format: date-time
          type: string
          description: The send date of the email.
        status:
          type: object
          description: The status of the email.
        disappear_in:
          type: number
          minimum: 1
          maximum: 31
        email_enhancers:
          type: object
      required:
        - _id
        - kpi_sent
        - kpi_opened
        - kpi_clicks
        - kpi_soft_bounce
        - kpi_hard_bounce
        - kpi_unsubscribed
        - type
        - name
        - subject
        - sender_name
        - sender_alias
        - sender_domain_id
        - objective
        - budget
        - target_audience
        - target_lists
        - target_segments
        - html
        - send_now
        - send_date
        - status
        - disappear_in
        - email_enhancers
    SendDynamicAdDto:
      type: object
      properties: {}
    EmailDto:
      type: object
      properties:
        type:
          type: string
          description: The type of email
          minLength: 5
        name:
          type: string
          description: The name of the email.
          minLength: 5
        subject:
          type: string
          description: The subject of the email.
          minLength: 5
        sender_name:
          type: string
          description: The name of the sender.
          minLength: 3
        sender_alias:
          type: string
          description: The alias of the sender.
          pattern: /^[a-zA-Z0-9._-]+$/
        sender_domain_id:
          type: string
          description: The domain of the sender.
        objective:
          description: The objective of the ad email.
          enum:
            - reach
            - awareness
            - dynamic_ad
          type: string
        budget:
          type: number
          description: The budget of the ad email.
        target_audience:
          type: object
          description: The target audience of the email.
        target_lists:
          description: The lists of recipients you wish to target.
          type: array
          items:
            type: string
        target_segments:
          description: The segments of recipients you wish to target.
          type: array
          items:
            type: string
        html:
          type: string
          description: The html body of the email.
          minLength: 5
        json:
          type: string
          description: The json of the email.
        version:
          type: number
          description: The version of the email.
        send_now:
          type: boolean
          description: Whether to send the email now or later
        send_date:
          format: date-time
          type: string
          description: The send date of the email.
        status:
          type: object
          description: The status of the email.
        disappear_in:
          type: number
          minimum: 1
          maximum: 31
        email_enhancers:
          type: object
      required:
        - type
        - name
        - subject
        - sender_name
        - sender_alias
        - sender_domain_id
        - objective
        - budget
        - target_audience
        - target_lists
        - target_segments
        - html
        - send_now
        - send_date
        - status
        - disappear_in
        - email_enhancers
    EmailLogDto:
      type: object
      properties:
        type:
          type: string
          description: The id of the tenant this log entry is for
        objective:
          type: string
        tenant_id:
          type: string
          description: The id of the tenant this log entry is for
        email_id:
          type: string
          description: The id of the email this log entry is for
        automation_id:
          type: string
          description: The id of the automation this log entry is for
        stage_id:
          type: string
          description: The id of the step this log entry is for
        recipient:
          type: object
          description: The recipient details/metadata
        status:
          type: string
          description: The status of the email
      required:
        - type
        - tenant_id
        - recipient
    UpdateEmailRequestDto:
      type: object
      properties:
        target_users:
          type: object
      required:
        - target_users
    GenerateEmailDto:
      type: object
      properties:
        url:
          type: string
        emailSchema:
          type: string
        flow:
          type: string
          enum:
            - vertical
            - horizontal
            - alternating
      required:
        - url
        - emailSchema
        - flow
    SendTestEmailDto:
      type: object
      properties:
        subject:
          type: string
          description: The subject of the email.
          minLength: 5
        sender_name:
          type: object
          description: The name of the sender.
          minLength: 3
        sender_alias:
          type: object
          description: The alias of the sender.
          pattern: /^[a-zA-Z0-9._-]+$/
        sender_domain_id:
          type: object
          description: The domain of the sender.
        html:
          type: string
          description: The body html of the email.
          minLength: 5
        recipient_email:
          type: string
          description: The recipient of the test email.
        email_enhancers:
          type: object
      required:
        - subject
        - sender_name
        - sender_alias
        - sender_domain_id
        - html
        - recipient_email
    AdjustEmailsQueueRequestDto:
      type: object
      properties:
        user_id:
          type: string
      required:
        - user_id
    BounceRequestDto:
      type: object
      properties:
        email_id:
          type: string
        email_log_id:
          type: string
        email:
          type: string
        errorCode:
          type: number
        transactional:
          type: boolean
      required:
        - email_id
        - email_log_id
        - email
        - errorCode
        - transactional
    RecipientDto:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
      required:
        - name
        - email
    CreateTransactionalEmailLogRequestDto:
      type: object
      properties:
        subject:
          type: string
          description: The subject of the email.
          minLength: 5
        tenant_id:
          $ref: '#/components/schemas/ObjectId'
        sender_name:
          type: string
          description: The name of the sender
          minLength: 3
        sender_email:
          type: string
          description: The email of the sender
        to_name:
          type: string
          minLength: 3
        to_email:
          type: string
        cc:
          type: array
          items:
            $ref: '#/components/schemas/RecipientDto'
        bcc:
          type: array
          items:
            $ref: '#/components/schemas/RecipientDto'
        reply_to:
          type: string
        headers:
          type: object
        html:
          type: string
          minLength: 20
        template_id:
          type: string
        merge_data:
          type: object
      required:
        - subject
        - tenant_id
        - sender_name
        - sender_email
        - to_name
        - to_email
        - merge_data
    CreateTransactionalEmailLogResponseDto:
      type: object
      properties:
        _id:
          type: string
        links:
          description: The links embedded in the email
          type: array
          items:
            type: object
        status:
          type: string
          description: The status of the email
          enum:
            - queued
            - sending
            - sent
            - failed
        kpi_opened:
          type: string
          description: The number of times email was opened.
        kpi_clicks:
          type: string
          description: The number of times email was clicked.
        kpi_soft_bounce:
          type: string
          description: The number of times email was soft bounded.
        kpi_hard_bounce:
          type: string
          description: The number of times email was hard bounded.
        events:
          type: object
          description: Events related to the email
        delivered_at:
          format: date-time
          type: string
          description: The date the email was delivered
        tenant_id:
          $ref: '#/components/schemas/ObjectId'
        sender_name:
          type: string
          description: The name of the sender
          minLength: 3
        sender_email:
          type: string
          description: The email of the sender
        to_name:
          type: string
          minLength: 3
        to_email:
          type: string
        subject:
          type: string
          description: The subject of the email.
          minLength: 5
        cc:
          type: array
          items:
            $ref: '#/components/schemas/RecipientDto'
        bcc:
          type: array
          items:
            $ref: '#/components/schemas/RecipientDto'
        reply_to:
          type: string
        headers:
          type: object
        html:
          type: string
          minLength: 20
        template_id:
          type: string
        merge_data:
          type: object
      required:
        - _id
        - links
        - status
        - kpi_opened
        - kpi_clicks
        - kpi_soft_bounce
        - kpi_hard_bounce
        - events
        - delivered_at
        - tenant_id
        - sender_name
        - sender_email
        - to_name
        - to_email
        - subject
        - merge_data
    TransactionalEmailLogDto:
      type: object
      properties:
        tenant_id:
          $ref: '#/components/schemas/ObjectId'
        sender_name:
          type: string
          description: The name of the sender
          minLength: 3
        sender_email:
          type: string
          description: The email of the sender
        to_name:
          type: string
          minLength: 3
        to_email:
          type: string
        subject:
          type: string
          description: The subject of the email.
          minLength: 5
        cc:
          type: array
          items:
            $ref: '#/components/schemas/RecipientDto'
        bcc:
          type: array
          items:
            $ref: '#/components/schemas/RecipientDto'
        reply_to:
          type: string
        headers:
          type: object
        html:
          type: string
          minLength: 20
        template_id:
          type: string
        merge_data:
          type: object
      required:
        - tenant_id
        - sender_name
        - sender_email
        - to_name
        - to_email
        - subject
        - merge_data
    CalculateReachRequestDto:
      type: object
      properties:
        filters:
          type: array
          items:
            type: object
        objective:
          type: string
        budget:
          type: number
        html:
          type: string
          minLength: 5
        email_id:
          type: string
        domainId:
          type: string
      required:
        - objective
        - budget
        - html
        - email_id
        - domainId
    CreateSegmentRequestDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the segment.
          example: Segment 1
          minLength: 3
      required:
        - name
    CreateSegmentResponseDto:
      type: object
      properties:
        _id:
          type: string
        count:
          type: number
        name:
          type: string
          description: The name of the segment.
          example: Segment 1
          minLength: 3
      required:
        - _id
        - count
        - name
    SegmentDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the segment.
          example: Segment 1
          minLength: 3
      required:
        - name
    UpdateSegmentRequestDto:
      type: object
      properties: {}
    CreateListRequestDto:
      type: object
      properties:
        tenant_id:
          description: The id of the tenant this list belongs to.
          allOf:
            - $ref: '#/components/schemas/ObjectId'
        name:
          type: string
          description: The name of the list.
          example: List 1
          minLength: 3
        autoimport:
          type: boolean
          description: Wheather autoimports are on for this list
        smart_contract_id:
          description: The id of the smart contract associated with this list.
          allOf:
            - $ref: '#/components/schemas/ObjectId'
        community_id:
          description: The id of the community associated with this list.
          allOf:
            - $ref: '#/components/schemas/ObjectId'
      required:
        - name
    CreateListResponseDto:
      type: object
      properties:
        _id:
          type: string
        count:
          type: number
        tenant_id:
          description: The id of the tenant this list belongs to.
          allOf:
            - $ref: '#/components/schemas/ObjectId'
        name:
          type: string
          description: The name of the list.
          example: List 1
          minLength: 3
        autoimport:
          type: boolean
          description: Wheather autoimports are on for this list
        smart_contract_id:
          description: The id of the smart contract associated with this list.
          allOf:
            - $ref: '#/components/schemas/ObjectId'
        community_id:
          description: The id of the community associated with this list.
          allOf:
            - $ref: '#/components/schemas/ObjectId'
      required:
        - _id
        - count
        - name
    ListDto:
      type: object
      properties:
        tenant_id:
          description: The id of the tenant this list belongs to.
          allOf:
            - $ref: '#/components/schemas/ObjectId'
        name:
          type: string
          description: The name of the list.
          example: List 1
          minLength: 3
        autoimport:
          type: boolean
          description: Wheather autoimports are on for this list
        smart_contract_id:
          description: The id of the smart contract associated with this list.
          allOf:
            - $ref: '#/components/schemas/ObjectId'
        community_id:
          description: The id of the community associated with this list.
          allOf:
            - $ref: '#/components/schemas/ObjectId'
      required:
        - name
    UpdateListRequestDto:
      type: object
      properties: {}
    AddToListRequestDto:
      type: object
      properties:
        contacts:
          description: Contacts that are being added to the list.
          type: array
          items:
            type: string
      required:
        - contacts
    CreateAutomationRequestDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the automation.
          example: Automation 1
          minLength: 5
      required:
        - name
    CreateAutomationResponseDto:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
          description: The name of the automation.
          example: Automation 1
          minLength: 5
        graph:
          type: object
          description: The graph/workflow definition for the automation
      required:
        - _id
        - name
        - graph
    AutomationDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the automation.
          example: Automation 1
          minLength: 5
        graph:
          type: object
          description: The graph/workflow definition for the automation
      required:
        - name
        - graph
    UpdateAutomationRequestDto:
      type: object
      properties:
        nodeDeleted:
          type: object
          properties:
            id:
              type: string
            pathKept:
              type: boolean
          required:
            - id
            - pathKept
        name:
          type: string
          description: The name of the automation.
          example: Automation 1
          minLength: 5
        graph:
          type: object
          description: The graph/workflow definition for the automation
      required:
        - nodeDeleted
    AutomationEntryNodeDto:
      type: object
      properties:
        condition:
          type: string
          description: The condition that will trigger this automation.
          enum:
            - contact_added_to_segment
            - contact_added_to_list
        list_ids:
          description: The lists that will trigger this automation.
          type: array
          items:
            type: string
        segment_ids:
          description: The segments that will trigger this automation.
          type: array
          items:
            type: string
      required:
        - condition
        - list_ids
        - segment_ids
    AutomationActionNodeDto:
      type: object
      properties:
        action:
          type: string
          description: The action that will be performed when the automation is triggered.
          enum:
            - send_email
        template_id:
          type: string
          description: The template that will be used for the email.
        subject:
          type: string
          description: The subject of the email.
          minLength: 5
        sender_name:
          type: string
          description: The name of the sender.
          minLength: 3
        sender_alias:
          type: string
          description: The alias of the sender.
          pattern: /^[a-zA-Z0-9._-]+$/
        sender_domain_id:
          type: string
          description: The domain of the sender.
      required:
        - action
        - template_id
        - subject
        - sender_name
        - sender_alias
        - sender_domain_id
    AutomationBranchNodeDto:
      type: object
      properties:
        condition:
          type: string
          description: The if/else condition.
          enum:
            - opened_email
            - opened_specific_email
            - clicked_any_link
        timer_unit:
          type: string
          description: The timer unit type.
          enum:
            - hours
            - days
        timer_value:
          type: number
          description: The timer value.
          minimum: 1
          maximum: 365
      required:
        - condition
        - timer_unit
        - timer_value
    AutomationWaitNodeDto:
      type: object
      properties:
        timer_unit:
          type: string
          description: The timer unit type.
          enum:
            - hours
            - days
        timer_value:
          type: number
          description: The timer value.
          minimum: 1
          maximum: 365
      required:
        - timer_unit
        - timer_value
    CreateCustomDomainRequestDto:
      type: object
      properties:
        url:
          type: string
          description: The custom domain's name.
          example: example.com
      required:
        - url
    CreateCustomDomainResponseDto:
      type: object
      properties:
        _id:
          type: string
        url:
          type: string
          description: The custom domain's name.
          example: example.com
      required:
        - _id
        - url
    CustomDomainDto:
      type: object
      properties:
        url:
          type: string
          description: The custom domain's name.
          example: example.com
      required:
        - url
    CreateSmartContractRequestDto:
      type: object
      properties:
        chain:
          type: string
          description: The chain that the smart contract lives on.
          example: ethereum
        asset_type:
          type: string
          description: The type of asset managed by this contract.
          example: erc20
          enum:
            - ERC20
            - ERC721
            - ERC1155
            - CUSTOM
            - INVESTOR_CONTRACT
            - POOL_REGISTRY
            - EMT_POOL
        address:
          type: string
          description: The address of the smart contract.
          example: 0x...
        owner:
          type: boolean
          description: Whether the user is the owner of the smart contract.
      required:
        - chain
        - asset_type
        - address
        - owner
    CreateSmartContractResponseDto:
      type: object
      properties:
        _id:
          type: string
        chain:
          type: string
          description: The chain that the smart contract lives on.
          example: ethereum
        asset_type:
          type: string
          description: The type of asset managed by this contract.
          example: erc20
          enum:
            - ERC20
            - ERC721
            - ERC1155
            - CUSTOM
            - INVESTOR_CONTRACT
            - POOL_REGISTRY
            - EMT_POOL
        address:
          type: string
          description: The address of the smart contract.
          example: 0x...
        owner:
          type: boolean
          description: Whether the user is the owner of the smart contract.
      required:
        - _id
        - chain
        - asset_type
        - address
        - owner
    SmartContractDto:
      type: object
      properties:
        chain:
          type: string
          description: The chain that the smart contract lives on.
          example: ethereum
        asset_type:
          description: The type of asset managed by this contract.
          example: erc20
          enum:
            - ERC20
            - ERC721
            - ERC1155
            - CUSTOM
            - INVESTOR_CONTRACT
            - POOL_REGISTRY
            - EMT_POOL
          type: string
        address:
          type: string
          description: The address of the smart contract.
          example: 0x...
        owner:
          type: boolean
          description: Whether the user is the owner of the smart contract.
      required:
        - chain
        - asset_type
        - address
        - owner
    CreateCustomAttributeRequestDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the custom attribute.
          example: Attribute Name
          minLength: 3
        type:
          type: string
          description: Type of the custom attribute.
          example: text
          enum:
            - boolean
            - text
            - number
            - date
            - category
            - multiple_select
        options:
          description: The options for a 'category' or 'multiple_select' list
          example: '"["Red", "Blue"]"'
          type: array
          items:
            type: string
      required:
        - name
        - type
        - options
    CreateCustomAttributeResponseDto:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
          description: The name of the custom attribute.
          example: Attribute Name
          minLength: 3
        type:
          type: string
          description: Type of the custom attribute.
          example: text
          enum:
            - boolean
            - text
            - number
            - date
            - category
            - multiple_select
        options:
          description: The options for a 'category' or 'multiple_select' list
          example: '"["Red", "Blue"]"'
          type: array
          items:
            type: string
      required:
        - _id
        - name
        - type
        - options
    CustomAttributeDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the custom attribute.
          example: Attribute Name
          minLength: 3
        type:
          description: Type of the custom attribute.
          example: text
          enum:
            - boolean
            - text
            - number
            - date
            - category
            - multiple_select
          type: string
        options:
          description: The options for a 'category' or 'multiple_select' list
          example: '"["Red", "Blue"]"'
          type: array
          items:
            type: string
      required:
        - name
        - type
        - options
    UpdateCustomAttributeRequestDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the custom attribute.
          example: Attribute Name
          minLength: 3
        type:
          description: Type of the custom attribute.
          example: text
          enum:
            - boolean
            - text
            - number
            - date
            - category
            - multiple_select
          type: string
        options:
          description: The options for a 'category' or 'multiple_select' list
          example: '"["Red", "Blue"]"'
          type: array
          items:
            type: string
      required:
        - name
        - type
        - options
    CreatePlanRequestDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the plan.
          example: Basic
          minLength: 3
        catchline:
          type: string
          description: The catchline of the plan.
          example: Starting from
        api_access:
          type: boolean
          description: Can use api.
        team_features:
          type: boolean
          description: Can manage users.
        send_advertising_emails:
          type: boolean
          description: Can send advertising emails.
        max_email_sent:
          type: number
          description: Maxium number of emails that can be sent.
        view_advertising_emails:
          type: boolean
          description: Can view advertising emails.
        send_engagement_emails:
          type: boolean
          description: Can send advertising emails.
        view_engagement_emails:
          type: boolean
          description: Can view engagement emails.
        manage_contacts:
          type: boolean
          description: Can manage contacts (+lists & segments).
        monitor_smart_contracts:
          type: boolean
          description: Can manage smart contracts.
        max_smart_contracts:
          type: number
        custom_attributes:
          type: boolean
          description: Can manage custom attributes.
        automations:
          type: boolean
          description: Can manage automations.
        templates:
          type: boolean
          description: Can manage templates.
        transactional_emails:
          type: boolean
          description: Can access transactional emails.
        custom_domains:
          type: boolean
          description: Can configure custom domains.
        stripe_product_id:
          type: string
          description: The stripe product id.
        show_on_plans_grid:
          type: boolean
          description: Show on plans grid.
        public_price_id:
          type: string
          description: The stripe price id featured on the pricing grid.
        features_list:
          type: string
          description: The list of features for this plan.
        custom_signup_link:
          type: string
          description: The custom signup link.
        ai_tools:
          type: boolean
          description: AI features.
        email_enhancers:
          type: boolean
          description: Email Enhancers.
      required:
        - name
        - catchline
        - api_access
        - team_features
        - send_advertising_emails
        - view_advertising_emails
        - send_engagement_emails
        - view_engagement_emails
        - manage_contacts
        - monitor_smart_contracts
        - custom_attributes
        - automations
        - templates
        - transactional_emails
        - custom_domains
        - stripe_product_id
        - show_on_plans_grid
        - public_price_id
        - features_list
        - custom_signup_link
        - ai_tools
        - email_enhancers
    CreatePlanResponseDto:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
          description: The name of the plan.
          example: Basic
          minLength: 3
        catchline:
          type: string
          description: The catchline of the plan.
          example: Starting from
        api_access:
          type: boolean
          description: Can use api.
        team_features:
          type: boolean
          description: Can manage users.
        send_advertising_emails:
          type: boolean
          description: Can send advertising emails.
        max_email_sent:
          type: number
          description: Maxium number of emails that can be sent.
        view_advertising_emails:
          type: boolean
          description: Can view advertising emails.
        send_engagement_emails:
          type: boolean
          description: Can send advertising emails.
        view_engagement_emails:
          type: boolean
          description: Can view engagement emails.
        manage_contacts:
          type: boolean
          description: Can manage contacts (+lists & segments).
        monitor_smart_contracts:
          type: boolean
          description: Can manage smart contracts.
        max_smart_contracts:
          type: number
        custom_attributes:
          type: boolean
          description: Can manage custom attributes.
        automations:
          type: boolean
          description: Can manage automations.
        templates:
          type: boolean
          description: Can manage templates.
        transactional_emails:
          type: boolean
          description: Can access transactional emails.
        custom_domains:
          type: boolean
          description: Can configure custom domains.
        stripe_product_id:
          type: string
          description: The stripe product id.
        show_on_plans_grid:
          type: boolean
          description: Show on plans grid.
        public_price_id:
          type: string
          description: The stripe price id featured on the pricing grid.
        features_list:
          type: string
          description: The list of features for this plan.
        custom_signup_link:
          type: string
          description: The custom signup link.
        ai_tools:
          type: boolean
          description: AI features.
        email_enhancers:
          type: boolean
          description: Email Enhancers.
      required:
        - _id
        - name
        - catchline
        - api_access
        - team_features
        - send_advertising_emails
        - view_advertising_emails
        - send_engagement_emails
        - view_engagement_emails
        - manage_contacts
        - monitor_smart_contracts
        - custom_attributes
        - automations
        - templates
        - transactional_emails
        - custom_domains
        - stripe_product_id
        - show_on_plans_grid
        - public_price_id
        - features_list
        - custom_signup_link
        - ai_tools
        - email_enhancers
    PlanDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the plan.
          example: Basic
          minLength: 3
        catchline:
          type: string
          description: The catchline of the plan.
          example: Starting from
        api_access:
          type: boolean
          description: Can use api.
        team_features:
          type: boolean
          description: Can manage users.
        send_advertising_emails:
          type: boolean
          description: Can send advertising emails.
        max_email_sent:
          type: number
          description: Maxium number of emails that can be sent.
        view_advertising_emails:
          type: boolean
          description: Can view advertising emails.
        send_engagement_emails:
          type: boolean
          description: Can send advertising emails.
        view_engagement_emails:
          type: boolean
          description: Can view engagement emails.
        manage_contacts:
          type: boolean
          description: Can manage contacts (+lists & segments).
        monitor_smart_contracts:
          type: boolean
          description: Can manage smart contracts.
        max_smart_contracts:
          type: number
        custom_attributes:
          type: boolean
          description: Can manage custom attributes.
        automations:
          type: boolean
          description: Can manage automations.
        templates:
          type: boolean
          description: Can manage templates.
        transactional_emails:
          type: boolean
          description: Can access transactional emails.
        custom_domains:
          type: boolean
          description: Can configure custom domains.
        stripe_product_id:
          type: string
          description: The stripe product id.
        show_on_plans_grid:
          type: boolean
          description: Show on plans grid.
        public_price_id:
          type: string
          description: The stripe price id featured on the pricing grid.
        features_list:
          type: string
          description: The list of features for this plan.
        custom_signup_link:
          type: string
          description: The custom signup link.
        ai_tools:
          type: boolean
          description: AI features.
        email_enhancers:
          type: boolean
          description: Email Enhancers.
      required:
        - name
        - catchline
        - api_access
        - team_features
        - send_advertising_emails
        - view_advertising_emails
        - send_engagement_emails
        - view_engagement_emails
        - manage_contacts
        - monitor_smart_contracts
        - custom_attributes
        - automations
        - templates
        - transactional_emails
        - custom_domains
        - stripe_product_id
        - show_on_plans_grid
        - public_price_id
        - features_list
        - custom_signup_link
        - ai_tools
        - email_enhancers
    UpdatePlanRequestDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the plan.
          example: Basic
          minLength: 3
        catchline:
          type: string
          description: The catchline of the plan.
          example: Starting from
        api_access:
          type: boolean
          description: Can use api.
        team_features:
          type: boolean
          description: Can manage users.
        send_advertising_emails:
          type: boolean
          description: Can send advertising emails.
        max_email_sent:
          type: number
          description: Maxium number of emails that can be sent.
        view_advertising_emails:
          type: boolean
          description: Can view advertising emails.
        send_engagement_emails:
          type: boolean
          description: Can send advertising emails.
        view_engagement_emails:
          type: boolean
          description: Can view engagement emails.
        manage_contacts:
          type: boolean
          description: Can manage contacts (+lists & segments).
        monitor_smart_contracts:
          type: boolean
          description: Can manage smart contracts.
        max_smart_contracts:
          type: number
        custom_attributes:
          type: boolean
          description: Can manage custom attributes.
        automations:
          type: boolean
          description: Can manage automations.
        templates:
          type: boolean
          description: Can manage templates.
        transactional_emails:
          type: boolean
          description: Can access transactional emails.
        custom_domains:
          type: boolean
          description: Can configure custom domains.
        stripe_product_id:
          type: string
          description: The stripe product id.
        show_on_plans_grid:
          type: boolean
          description: Show on plans grid.
        public_price_id:
          type: string
          description: The stripe price id featured on the pricing grid.
        features_list:
          type: string
          description: The list of features for this plan.
        custom_signup_link:
          type: string
          description: The custom signup link.
        ai_tools:
          type: boolean
          description: AI features.
        email_enhancers:
          type: boolean
          description: Email Enhancers.
    CommunityDto:
      type: object
      properties:
        tenant_id:
          description: The tenant the community belongs to.
          example: 5f1d7c6b9b3f6b1d6c4d9b3f
          allOf:
            - $ref: '#/components/schemas/ObjectId'
        title:
          type: string
          description: The name of the community
          example: Probably Nothing
          minLength: 3
        slug:
          type: string
          description: The slug of the community
          example: probably-nothing
          minLength: 3
        description:
          type: string
          description: The description of the community
          example: Doe
        short_description:
          type: string
          description: The short description of the community
          example: Doe
          minLength: 10
        what_you_get:
          description: The what you get of the community
          example: '"[ "Doe" ]"'
          type: array
          items:
            type: string
            minLength: 5
        logo:
          type: string
          description: The logo of the community
        background:
          type: string
          description: The background of the community
        affiliate_id:
          type: string
          description: The affiliate id of the community
          example: 5f1d7c6b9b3f6b1d6c4d9b3f
        user_id:
          type: string
          description: The user id of the community
          example: 5f1d7c6b9b3f6b1d6c4d9b3f
        priority:
          type: number
          description: The priority of the community
          example: 10
        show:
          type: boolean
          description: Indicates if the community should be shown
          example: 'true'
        carousel_priority:
          type: number
          description: The carouselpriority of the community
          example: 10
        show_on_carousel:
          type: boolean
          description: Indicates if the community should be shown on carousel
          example: 'true'
        public:
          type: boolean
          description: Indicates if the community should be shown on public page
          example: 'true'
      required:
        - title
        - slug
        - description
    CreateCommunityRequestDto:
      type: object
      properties:
        tenant_id:
          description: The tenant the community belongs to.
          example: 5f1d7c6b9b3f6b1d6c4d9b3f
          allOf:
            - $ref: '#/components/schemas/ObjectId'
        title:
          type: string
          description: The name of the community
          example: Probably Nothing
          minLength: 3
        slug:
          type: string
          description: The slug of the community
          example: probably-nothing
          minLength: 3
        description:
          type: string
          description: The description of the community
          example: Doe
        short_description:
          type: string
          description: The short description of the community
          example: Doe
          minLength: 10
        what_you_get:
          description: The what you get of the community
          example: '"[ "Doe" ]"'
          type: array
          items:
            type: string
            minLength: 5
        logo:
          type: string
          description: The logo of the community
        background:
          type: string
          description: The background of the community
        affiliate_id:
          type: string
          description: The affiliate id of the community
          example: 5f1d7c6b9b3f6b1d6c4d9b3f
        user_id:
          type: string
          description: The user id of the community
          example: 5f1d7c6b9b3f6b1d6c4d9b3f
        priority:
          type: number
          description: The priority of the community
          example: 10
        show:
          type: boolean
          description: Indicates if the community should be shown
          example: 'true'
        carousel_priority:
          type: number
          description: The carouselpriority of the community
          example: 10
        show_on_carousel:
          type: boolean
          description: Indicates if the community should be shown on carousel
          example: 'true'
        public:
          type: boolean
          description: Indicates if the community should be shown on public page
          example: 'true'
      required:
        - title
        - slug
        - description
    CreateWidgetRequestDto:
      type: object
      properties:
        tenant_id:
          description: The id of the tenant this widget belongs to.
          allOf:
            - $ref: '#/components/schemas/ObjectId'
        type:
          type: string
          description: The type of the widget.
          example: Community Subscription
          minLength: 3
        target_id:
          description: The id of the target list associated with this widget.
          allOf:
            - $ref: '#/components/schemas/ObjectId'
        url:
          type: string
          description: The URL for this widget
      required:
        - type
        - target_id
        - url
    CreateWidgetResponseDto:
      type: object
      properties:
        _id:
          type: string
        count:
          type: number
        tenant_id:
          description: The id of the tenant this widget belongs to.
          allOf:
            - $ref: '#/components/schemas/ObjectId'
        type:
          type: string
          description: The type of the widget.
          example: Community Subscription
          minLength: 3
        target_id:
          description: The id of the target list associated with this widget.
          allOf:
            - $ref: '#/components/schemas/ObjectId'
        url:
          type: string
          description: The URL for this widget
      required:
        - _id
        - count
        - type
        - target_id
        - url
    WidgetDto:
      type: object
      properties:
        tenant_id:
          description: The id of the tenant this widget belongs to.
          allOf:
            - $ref: '#/components/schemas/ObjectId'
        type:
          type: string
          description: The type of the widget.
          example: Community Subscription
          minLength: 3
        target_id:
          description: The id of the target list associated with this widget.
          allOf:
            - $ref: '#/components/schemas/ObjectId'
        url:
          type: string
          description: The URL for this widget
      required:
        - type
        - target_id
        - url
    CreateAppletRequestDto:
      type: object
      properties:
        name:
          type: string
          minLength: 3
      required:
        - name
    CreateAppletResponseDto:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
          minLength: 3
      required:
        - _id
        - name
    AppletDto:
      type: object
      properties:
        name:
          type: string
          minLength: 3
      required:
        - name
    UpdateAppletRequestDto:
      type: object
      properties:
        tenant_id:
          type: string
        logo:
          type: string
        url:
          type: string
        description:
          type: string
          minLength: 5
        published:
          type: boolean
        is_sso_implemented:
          type: boolean
          description: >-
            Indicates whether Single Sign-On (SSO) is implemented for the
            applet.
        name:
          type: string
          minLength: 3
      required:
        - tenant_id
        - url
        - description
        - published
        - is_sso_implemented
    CreateAutodraftRequestDto:
      type: object
      properties:
        url:
          type: string
        subject:
          type: string
          minLength: 5
        template_id:
          type: string
        flow:
          type: string
          enum:
            - vertical
            - horizontal
            - alternating
        frequency:
          type: string
          enum:
            - ''
            - daily
            - monthly
            - weekly
        interval:
          type: string
        users:
          type: array
          items:
            type: string
        autosend:
          type: boolean
        disappear_in:
          type: number
          description: When the email will expire.
          minimum: 1
          maximum: 31
        sender_name:
          type: string
          description: The name of the sender.
          minLength: 3
        sender_alias:
          type: string
          description: The alias of the sender.
          pattern: /^[a-zA-Z0-9._-]+$/
        sender_domain_id:
          type: string
          description: The domain of the sender.
        target_lists:
          description: The lists of recipients you wish to target.
          type: array
          items:
            type: string
        target_segments:
          description: The segments of recipients you wish to target.
          type: array
          items:
            type: string
      required:
        - url
        - subject
        - template_id
        - flow
        - frequency
        - interval
        - users
        - autosend
        - disappear_in
        - sender_name
        - sender_alias
        - sender_domain_id
        - target_lists
        - target_segments
    CreateAutodraftResponseDto:
      type: object
      properties:
        url:
          type: string
        subject:
          type: string
          minLength: 5
        template_id:
          type: string
        flow:
          type: string
          enum:
            - vertical
            - horizontal
            - alternating
        frequency:
          type: string
          enum:
            - ''
            - daily
            - monthly
            - weekly
        interval:
          type: string
        users:
          type: array
          items:
            type: string
        autosend:
          type: boolean
        disappear_in:
          type: number
          description: When the email will expire.
          minimum: 1
          maximum: 31
        sender_name:
          type: string
          description: The name of the sender.
          minLength: 3
        sender_alias:
          type: string
          description: The alias of the sender.
          pattern: /^[a-zA-Z0-9._-]+$/
        sender_domain_id:
          type: string
          description: The domain of the sender.
        target_lists:
          description: The lists of recipients you wish to target.
          type: array
          items:
            type: string
        target_segments:
          description: The segments of recipients you wish to target.
          type: array
          items:
            type: string
      required:
        - url
        - subject
        - template_id
        - flow
        - frequency
        - interval
        - users
        - autosend
        - disappear_in
        - sender_name
        - sender_alias
        - sender_domain_id
        - target_lists
        - target_segments
    AutodraftDto:
      type: object
      properties:
        url:
          type: string
        subject:
          type: string
          minLength: 5
        template_id:
          type: string
        flow:
          enum:
            - vertical
            - horizontal
            - alternating
          type: string
        frequency:
          enum:
            - ''
            - daily
            - monthly
            - weekly
          type: string
        interval:
          type: string
        users:
          type: array
          items:
            type: string
        autosend:
          type: boolean
        disappear_in:
          type: number
          description: When the email will expire.
          minimum: 1
          maximum: 31
        sender_name:
          type: string
          description: The name of the sender.
          minLength: 3
        sender_alias:
          type: string
          description: The alias of the sender.
          pattern: /^[a-zA-Z0-9._-]+$/
        sender_domain_id:
          type: string
          description: The domain of the sender.
        target_lists:
          description: The lists of recipients you wish to target.
          type: array
          items:
            type: string
        target_segments:
          description: The segments of recipients you wish to target.
          type: array
          items:
            type: string
      required:
        - url
        - subject
        - template_id
        - flow
        - frequency
        - interval
        - users
        - autosend
        - disappear_in
        - sender_name
        - sender_alias
        - sender_domain_id
        - target_lists
        - target_segments
    UpdateAutodraftRequestDto:
      type: object
      properties:
        url:
          type: string
        subject:
          type: string
          minLength: 5
        template_id:
          type: string
        flow:
          enum:
            - vertical
            - horizontal
            - alternating
          type: string
        frequency:
          enum:
            - ''
            - daily
            - monthly
            - weekly
          type: string
        interval:
          type: string
        users:
          type: array
          items:
            type: string
        autosend:
          type: boolean
        disappear_in:
          type: number
          description: When the email will expire.
          minimum: 1
          maximum: 31
        sender_name:
          type: string
          description: The name of the sender.
          minLength: 3
        sender_alias:
          type: string
          description: The alias of the sender.
          pattern: /^[a-zA-Z0-9._-]+$/
        sender_domain_id:
          type: string
          description: The domain of the sender.
        target_lists:
          description: The lists of recipients you wish to target.
          type: array
          items:
            type: string
        target_segments:
          description: The segments of recipients you wish to target.
          type: array
          items:
            type: string
      required:
        - url
        - subject
        - template_id
        - flow
        - frequency
        - interval
        - users
        - autosend
        - disappear_in
        - sender_name
        - sender_alias
        - sender_domain_id
        - target_lists
        - target_segments
    CheckEtherMailLikeRequestDto:
      type: object
      properties:
        label:
          type: string
      required:
        - label
    CreateEmailAirdropDto:
      type: object
      properties:
        _id:
          type: string
        email_id:
          type: string
        from:
          type: string
        chain:
          type: string
          enum:
            - ethereum
            - polygon
            - avalanche
            - celo
            - fantom
            - binance
            - base
            - arbitrum
            - sepolia
            - local
        token:
          type: string
        airdrop_type:
          type: string
          enum:
            - Equity
            - Fixed
        token_value_type:
          type: string
          enum:
            - AMOUNT
            - ID
        token_type:
          type: string
          enum:
            - Token
            - NFT
        amount:
          type: string
        surplus:
          type: string
        surplus_receiver:
          type: string
        transfer_estimate:
          type: string
        max_users:
          type: number
        token_decimals:
          type: number
        latest_mail_iat:
          type: number
        remaining_funds_returned:
          type: boolean
        funds_return_hashes:
          type: object
        fully_funded:
          type: boolean
      required:
        - _id
        - email_id
        - from
        - chain
        - token
        - airdrop_type
        - token_value_type
        - token_type
        - amount
        - surplus
        - surplus_receiver
        - transfer_estimate
        - max_users
        - token_decimals
        - latest_mail_iat
        - remaining_funds_returned
        - funds_return_hashes
        - fully_funded
    ReturnSurplusDto:
      type: object
      properties:
        emailAirdropId:
          type: string
      required:
        - emailAirdropId
    ChangeSurplusRecipientDto:
      type: object
      properties:
        emailAirdropId:
          type: string
        newSurplusRecipient:
          type: string
      required:
        - emailAirdropId
        - newSurplusRecipient
    ImportAirdropRecipientsDto:
      type: object
      properties:
        airdrop_id:
          type: string
        recipients_records:
          type: array
          items:
            type: object
      required:
        - airdrop_id
        - recipients_records
    ViralSnippetDto:
      type: object
      properties:
        adId:
          type: string
        selector:
          type: string
        userId:
          type: string
      required:
        - adId
        - selector
        - userId
    CreateDisappearingEmailDto:
      type: object
      properties:
        email_id:
          type: string
        appearing_days:
          type: number
      required:
        - email_id
        - appearing_days
    EmtDepositAuthorizationDto:
      type: object
      properties:
        amount:
          type: string
      required:
        - amount
    LoginRequestDto:
      type: object
      properties:
        email:
          type: string
          example: brennan.huff@pww.com
        password:
          type: string
          example: '123456789'
      required:
        - email
        - password
    TokenDto:
      type: object
      properties:
        expiresIn:
          type: number
          example: '1090123423949223498'
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
      required:
        - expiresIn
        - accessToken
    LoginResponseDto:
      type: object
      properties:
        token:
          $ref: '#/components/schemas/TokenDto'
      required:
        - token
    VerifyRequestDto:
      type: object
      properties:
        token:
          type: string
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2NGViNTlhY2UxZTM2MTEwMTJjZmRiZmEiLCJpYXQiOjE2OTQxNzUxODksImV4cCI6MTY5NDE3ODc4OX0.kHvX8gGV35X-Cv0snFaxmCiRfVs_KCjDhC_PupT4aOg
      required:
        - token
    VerifyResponseDto:
      type: object
      properties:
        user:
          type: boolean
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2NGViNTlhY2UxZTM2MTEwMTJjZmRiZmEiLCJpYXQiOjE2OTQxNzUxODksImV4cCI6MTY5NDE3ODc4OX0.kHvX8gGV35X-Cv0snFaxmCiRfVs_KCjDhC_PupT4aOg
      required:
        - user
    ResetPasswordRequestDto:
      type: object
      properties:
        email:
          type: string
          example: brennan.huff@pww.com
      required:
        - email
    SetNewPasswordRequestDto:
      type: object
      properties:
        user_id:
          example: ''
          allOf:
            - $ref: '#/components/schemas/ObjectId'
        reset_token:
          type: string
          example: x034mlja9u324ikns3
          minLength: 5
        password:
          type: string
          example: '123456789'
          minLength: 9
        confirm_password:
          type: string
          example: '123456789'
          minLength: 9
      required:
        - user_id
        - reset_token
        - password
        - confirm_password